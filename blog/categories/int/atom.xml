<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Int | Hedley]]></title>
  <link href="http://hedleyyan.github.io/blog/categories/int/atom.xml" rel="self"/>
  <link href="http://hedleyyan.github.io/"/>
  <updated>2015-07-30T22:52:38+08:00</updated>
  <id>http://hedleyyan.github.io/</id>
  <author>
    <name><![CDATA[hedley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[危机四伏整型运算]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/06/24/wei-ji-si-fu-zheng-xing-bian-jie/"/>
    <updated>2015-06-24T09:10:09+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/06/24/wei-ji-si-fu-zheng-xing-bian-jie</id>
    <content type="html"><![CDATA[<p>哈？整型运算？听起来好 <em>EASY</em> 啊喂！直奔主题咯。</p>

<h1>边界陷阱</h1>

<p>无论何时，请注意整型运算的边界问题，考虑最大值，最小值，越界的可能性。</p>

<h2><em>Puzzle 3: Long Division</em></h2>

<pre><code class="java">    public class LongDivision {
        public static void main(String[] args) {
            final long MICROS_PER_DAY = 24 * 60 * 60 * 1000 * 1000;
            final long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;
            System.out.println(MICROS_PER_DAY / MILLIS_PER_DAY);
        } 
    }
</code></pre>

<!--more-->


<p><em>EASY</em> 无压力，一目了然整型越界。 <code>MICROS_PER_DAY</code> 虽然声明为 <code>long</code>，可以装下计算结果，但是计算结果本身先是以 <code>int</code> 类型进行计算，计算完成后再赋值给 <code>MICROS_PER_DAY</code> 的。很不幸，在计算的时候就溢出了。</p>

<p>修改太简单，加一个类型声明后缀，大写的 <code>L</code>。</p>

<pre><code class="java">    public class LongDivision {
        public static void main(String[] args) {
            final long MICROS_PER_DAY = 24 * 60 * 60 * 1000 * 1000L;
            final long MILLIS_PER_DAY = 24 * 60 * 60 * 1000L;
            System.out.println(MICROS_PER_DAY / MILLIS_PER_DAY);
        } 
    }
</code></pre>

<h2><em>Puzzle 26: In the Loop</em></h2>

<pre><code class="java">    public class InTheLoop {
        public static final int END = Integer.MAX_VALUE;
        public static final int START = END - 100;

        public static void main(String[] args) {
            int count = 0;
            for (int i = START; i &lt;= END; i++)
                count++;
                System.out.println(count);
            }
    }
</code></pre>

<p>如果你没有仔细的看代码，可能会认为输出 <code>100</code>；如果你仔细一点，会发现这不是 <code>for</code> 循环的惯用语法 <em>(idiom)</em>，可能会认为输出 <code>101</code>。<em>Well</em> 都不是，你会发现没有输出，代码陷入了无限循环 <em>(Infinite loop)</em>。因为所有的 <code>int</code> 值都 <code>&lt;= Integer.MAX_VALUE</code>。</p>

<p>此外，将函数 <code>f(int)</code> 应用到所有的 40 亿整数的 <em>idiom</em> 是这个样子滴</p>

<pre><code class="java">// Apply the function f to all four billion int values
int i = Integer.MIN_VALUE;
do {
    f(i);
} while (i++ != Integer.MAX_VALUE);
</code></pre>

<h2><em>Puzzle 33: Infinite loop</em></h2>

<pre><code class="java">    while (i == -i &amp;&amp; i != 0) {

    }
</code></pre>

<p>给 <code>i</code> 一个声明，使上面的语句陷入 <em>Infinite loop</em>。</p>

<p>答案是 <code>int i = Integer.Integer.MIN_VALUE</code>。所以注意，相应的还有一个小陷阱， <code>Math.abs()</code> 可以 <code>&lt; 0</code>。</p>

<h2><em>Puzzle 65: A Strange Saga of a Suspicious Sort</em></h2>

<p>以下是一个将 100 个随机整数排序的代码段，短小精悍帅的很呢。但是很遗憾，输出基本都不会是众望所归的 <code>Order.DESCENDING</code>，问题出在哪呢？</p>

<pre><code class="java">import java.util.*;

public class SuspiciousSort {
    public static void main(String[] args) {
        Random rnd = new Random();
        Integer[] arr = new Integer[100];
        for (int i = 0; i &lt; arr.length; i++)
            arr[i] = rnd.nextInt();
        Comparator&lt;Integer&gt; cmp = new Comparator&lt;Integer&gt;() {
            public int compare(Integer i1, Integer i2) {
                return i2 - i1;
            }
        };
        Arrays.sort(arr, cmp);
        System.out.println(order(arr));
    }

    enum Order {
        ASCENDING, DESCENDING, CONSTANT, UNORDERED
    };

    static Order order(Integer[] a) {
        boolean ascending = false;
        boolean descending = false;
        for (int i = 1; i &lt; a.length; i++) {
            ascending |= (a[i] &gt; a[i - 1]);
            descending |= (a[i] &lt; a[i - 1]);
        }
        if (ascending &amp;&amp; !descending)
            return Order.ASCENDING;
        if (descending &amp;&amp; !ascending)
            return Order.DESCENDING;
        if (!ascending)
            return Order.CONSTANT;  // All elements equal
        return Order.UNORDERED;     // Array is not sorted
    }
}
</code></pre>

<p>问题出在 <code>Comparator&lt;Integer&gt; cmp</code> 上，虽然它的实现是喜闻乐见的 <em>idiom</em>。考虑以下的代码段</p>

<pre><code class="java">    public class Overflow {
        public static void main(String[] args) {
            int x = -2000000000;
            int z = 2000000000;
            System.out.println(x - z);
        } 
    }
</code></pre>

<p><code>x &lt; y</code>，并不一定代表 <code>x - y &lt; 0</code>。在用 <code>Comparator.compare()</code> 的 <em>idiom</em> 时候，请确认边界问题。</p>

<p>修改代码很简单，用现成的类库方法 <code>Collections.reverseOrder()</code> 提供逆序排列子。</p>

<p><blockquote><p>Do not use a subtraction-based comparator unless you are sure that the difference between values will never be greater than Integer.MAX_VALUE.</p></blockquote></p>

<h1>类型转换</h1>

<p><em><a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html">JSL</a></em> 定义了若干类型转换，关于整型的有三种</p>

<ul>
<li>Widening Primitive Conversion

<ul>
<li>byte to short, int, long, float, or double</li>
<li>short to int, long, float, or double</li>
<li>char to int, long, float, or double</li>
<li>int to long, float, or double</li>
<li>long to float or double</li>
<li>float to double</li>
</ul>
</li>
<li>Narrowing Primitive Conversion

<ul>
<li>short to byte or char</li>
<li>char to byte or short</li>
<li>int to byte, short, or char</li>
<li>long to byte, short, char, or int</li>
<li>float to byte, short, char, int, or long</li>
<li>double to byte, short, char, int, long, or float</li>
</ul>
</li>
<li>Widening and Narrowing Primitive Conversion

<ul>
<li>byte to char</li>
</ul>
</li>
</ul>


<p>整型的扩宽类型转换不会丢失值信息，声明中可直接转换。所有的缩窄类型转换都有可能丢失值信息，所以必须做显示的类型转换。</p>

<p>最奇怪的是第三种，一次类型转换既有扩宽又有缩窄。因为 <code>char</code> 无符号整型特殊一点，其实 <code>byte</code> 是先转为 <code>int</code>，然后再转为了 <code>char</code>。</p>

<h2><em>Puzzle 6: Multicast</em></h2>

<pre><code class="java">    public class Multicast {
        public static void main(String[] args) {
            System.out.println((int) (char) (byte) -1);     // 65535
        }
    }
</code></pre>

<p>转换过程</p>

<ul>
<li>(int) -1 ➡️ (byte) -1 : 0xffff ➡️ 0xf   <em>(narrowing)</em></li>
<li>(byte) -1 ➡️ (char) -1      <em>(widening and narrowing)</em>

<ul>
<li>(byte) -1 ➡️ (int) - 1 : 0xf ➡️ 0xffff</li>
<li>(int) -1 ➡️ (char) 65535 : 0xffff ➡️ 0xff</li>
</ul>
</li>
<li>(char) 65535 ➡️ (int) 65535 : 0xff ➡️ 0xffff    <em>(widening)</em></li>
</ul>


<p><strong>秘籍：当心 <em>Narrowing Primitive Conversion</em> 的值变化。</strong></p>

<h1><em>Other Tips</em></h1>

<h2><em>Puzzle 1: 求余</em></h2>

<p>以下是判断一个整数是否为奇数的方法，可行吗？</p>

<pre><code class="java">    public static boolean isOdd(int i) {
       return i % 2 == 1;
    }
</code></pre>

<p><em>One Quarter</em> 的情况下不可行：当 <code>i</code> 为负奇数时， <code>i % 2 == -1</code>。</p>

<pre><code class="java">    public static boolean isOdd(int i) {
       // esay fix
       return i % 2 != 0;
       // for performance-critical
       return i &amp; 1 == 0;
    }
</code></pre>

<h2><em>Puzzle 27: 移位</em></h2>

<pre><code class="java">    public class Shifty {
        public static void main(String[] args) {
            int i = 0;
            while (-1 &lt;&lt; i != 0)
                i++;
            System.out.println(i);
        } 
    }
</code></pre>

<p>因为 -1 的二进制表示 0xffff 有 32 位 1，所以输出应该是 32 吧？但是这是一个 <em>Infinite loop</em>。因为 -1 左移 32 位还是 -1。</p>

<p><blockquote><p>Shift operators use only the five low-order bits of their right operand as the shift distance, or six bits if the left operand is a long.</p></blockquote></p>

<h2><em>Puzzle 31: 组合运算符</em></h2>

<pre><code class="java">    while (i != 0) {
        i &gt;&gt;&gt;= 1;
    }
</code></pre>

<p>给 <code>i</code> 一个声明，使上面的语句陷入 <em>Infinite loop</em>。</p>

<p><blockquote><p>Compound assignment operators is that they can silently perform narrowing primitive conversions.</p></blockquote></p>

<p>答案可以是 <code>short i = -1</code>。所有非 <code>long</code> 的整型在运算时都需要转换为 <code>int</code>，该运算的步骤拆分为</p>

<ul>
<li>(short) -1 ➡️ (int) -1 : 0xff ➡️ 0xffff</li>
<li>-1 >>> 1 ➡️ 0x7fff</li>
<li>(int) 2<sup>31</sup> - 1 ➡️ (short) -1 : 0x7fff ➡️ 0xff</li>
<li><em>Infinite loop</em></li>
</ul>


<p>秘籍：不要对 <code>byte</code>, <code>short</code>, <code>char</code> 使用组合运算符。</p>

<h1>总结</h1>

<p>注意边界，注意转型，注意 <code>byte</code> <code>char</code>，注意特殊运算。</p>
]]></content>
  </entry>
  
</feed>
