<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jmap | Hedley]]></title>
  <link href="http://hedleyyan.github.io/blog/categories/jmap/atom.xml" rel="self"/>
  <link href="http://hedleyyan.github.io/"/>
  <updated>2021-02-04T13:22:58+08:00</updated>
  <id>http://hedleyyan.github.io/</id>
  <author>
    <name><![CDATA[hedley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HotSpot JVM 调试大杂烩]]></title>
    <link href="http://hedleyyan.github.io/blog/2016/09/21/jvm-diao-shi-da-za-hui/"/>
    <updated>2016-09-21T11:19:33+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2016/09/21/jvm-diao-shi-da-za-hui</id>
    <content type="html"><![CDATA[<p><blockquote><p>此文的 JVM 环境特指 HotSpot JVM</p></blockquote></p>

<h2><a href="http://xmlandmore.blogspot.hk/2012/01/understanding-garbage-collection.html">Understanding Garbage Collection</a></h2>

<p>了解 JVM 内存回收机制，以及年轻代、伊甸园、年老代的意义。<a href="http://xmlandmore.blogspot.hk/2012/03/case-study-of-javalangoutofmemoryerror.html">Full GC</a> 发生很频繁时，关注是否分配内存不足<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、死锁、或者内存泄露。</p>

<ul>
<li><a href="http://xmlandmore.blogspot.hk/2012/03/understanding-garbage-collector-output.html">Understanding Garbage Collector Output of Hotspot VM</a></li>
</ul>


<h2><a href="http://xmlandmore.blogspot.hk/2012/07/jstat-java-virtual-machine-statistics.html">jstat</a> - Statistics Monitoring</h2>

<p>一系列调试选项，常用 <code>jstat -gcutil</code> 排查内存问题。</p>

<h2><a href="http://xmlandmore.blogspot.hk/2013/04/analyze-hanging-programs-using-java.html">jstack</a> - Stack Trace</h2>

<ul>
<li><a href="http://xmlandmore.blogspot.hk/2012/08/understanding-jvm-thread-states.html">Generating Thread Dumps in HotSpot</a> - 等同于 <code>jstack [PID] &gt; threaddump.log</code></li>
<li><a href="http://geekexplains.blogspot.hk/2008/07/threadstate-in-java-blocked-vs-waiting.html">Thread.State in Java? BLOCKED vs WAITING</a></li>
<li><a href="https://community.oracle.com/blogs/sdo/2009/10/16/fun-jstack">Fun With JStack Blog</a></li>
<li><a href="http://stackoverflow.com/questions/28378592/java-thread-state-transition-waiting-to-blocked-or-runnable">Java thread state transition, WAITING to BLOCKED, or RUNNABLE?</a></li>
</ul>


<p>了解不同的线程状态。通常用来排查是否有死锁发生，以及找出高 CPU 消耗的线程状态。</p>

<ul>
<li><code>top -Hp [PID]</code> - 找出进程内最耗费CPU的线程</li>
<li><code>printf "%x\n" [PID]</code> - 得到线程号 TID</li>
<li><code>jstack [PID] | grep [TID]</code> - 观察线程信息</li>
</ul>


<p><img src="/images/JVM/states_trans.png"></p>

<h2><a href="http://xmlandmore.blogspot.hk/2013/08/diagnosing-outofmemoryerror-or-memory_10.html">jmap</a> - Memory Map</h2>

<p>分析 JVM 的内存状态，是排查内存泄露的关键。</p>

<ul>
<li><code>jmap -heap [PID]</code> - 进程堆内存使用情况</li>
<li><code>jmap -histo[:live] [PID] | head 15</code> - 对象占用图。对象占用图粒度很粗，无法获得更详细的对象状态</li>
<li><code>jmap -dump:format=b,file=dump.hprof [PID]</code> - 生成 <em>dump.hprof</em> 文件。执行时间稍长，基于此可进行进一步的精准分析</li>
</ul>


<h4><a href="http://xmlandmore.blogspot.hk/2014/01/eclipse-mat-understand-incoming-and.html">Eclipse MAT</a></h4>

<p>基于 <em>dump.hprof</em> 进行分析，首选主流工具 <em>Eclipse MAT</em>。<em>MAT</em> 可以开上帝视角，通过 <a href="http://xmlandmore.blogspot.hk/2014/01/eclipse-mat-querying-heap-objects-using.html">OQL</a> 精确定位到每个对象，用来做详细的分析挖掘很好用。不过它的缺点也很明显：重量级。如果 dump 文件不大，直接用 <em>MAT</em> 分析没有问题。但现实运行环境中，dump 文件通常很大<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，一般需要面临以下问题：从服务器压缩传输到个人机器，压缩和传输的时间成本很高；解压缩后用 <em>MAT</em> 导入，如果个人机器的内存不够，无法进行解析<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<h5><a href="https://wiki.eclipse.org/MemoryAnalyzer/FAQ#Frequently_Asked_Questions">内存不够装进 Eclipse 的解决方案</a></h5>

<p>找到 <code>org.eclipse.equinox.launcher_1*.jar</code> 的本地目录，命令行执行生成索引过程：</p>

<p><code>java -jar /Users/hedley/eclipse/java-neon/Eclipse.app/Contents/Eclipse/plugins/org.eclipse.equinox.launcher_1*.jar -consoleLog -application org.eclipse.mat.api.parse dump.hprof org.eclipse.mat.api:suspects org.eclipse.mat.api:overview org.eclipse.mat.api:top_components</code> 生成报告，其中 <code>org.eclipse.mat.api:suspects</code>、<code>org.eclipse.mat.api:overview</code>、<code>org.eclipse.mat.api:top_components</code> 是生成的三个主要模块，可根据需要配置。再用 <em>Eclipse</em> 打开报告目录。</p>

<p><blockquote><p>如果以上命令还报内存不足，尝试加参数 -Xmx4g -XX:-UseGCOverheadLimit</p></blockquote></p>

<p><a href="https://www.ibm.com/support/knowledgecenter/SS3KLZ/com.ibm.java.diagnostics.memory.analyzer.doc/queryingheapobjects.html">OQL2</a></p>

<h4><a href="http://dr-brenschede.de/bheapsampler/">BHeapSampler</a></h4>

<p><em>BHeapSampler</em> 是一款轻量级的 JVM 内存分析工具。不，它不单单是轻量级，是羽毛级！如果用 <em>MAT</em>，通常需要把臃肿的 <em>dump.hprof</em> 传到本机进行操作<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。而 <em>BHeapSampler</em> 是一个大小只有 <em><em>26K</em></em> 的 <em>jar</em> 包，上传到服务器一行指令即可进行分析。它分析得到的是一张<strong>大内存对象引用图</strong>，不能进行任何操作与细项查询索引。但是这张重点鲜明的内存图，有时会比 <em>MAT</em> 更击中要害。大写的赞。</p>

<ul>
<li><code>java -Xmx40g -XX:-UseGCOverheadLimit -jar bheapsampler.jar dump.hprof</code> - 得到 <em>memory_graph.dot</em></li>
<li>可以用 <a href="http://graphviz.org/Download_macos.php">Graphviz</a> 查看 <em>.dot</em> 文件，装完也可以将 <em>.dot</em> 转为 <em>pdf</em> 格式： <code>/opt/local/bin/dot -Tpdf -omemory_graph.pdf memory_graph.dot</code></li>
</ul>


<h5>Mac 安装 <em>Graphviz</em></h5>

<p><img src="/images/JVM/graphviz.png"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>For old generation space OutOfMemoryErrors, increase -Xms and -Xmx; For permanent generation OutOfMemoryErrors, increase -XX:PermSize and -XX:MaxPermSize<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>我曾经分析过的线上压力一般服务器的 dump 在 10G 左右<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Eclipse 在导入 dump 文件后，会进行索引分析，占用大量内存。内存不足时会报 OutOfMemoryError<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>很少有人在服务器上装 Eclipse 吧？<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
