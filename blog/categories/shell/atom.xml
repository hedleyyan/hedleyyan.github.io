<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Hedley]]></title>
  <link href="http://hedleyyan.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://hedleyyan.github.io/"/>
  <updated>2016-03-11T18:10:07+08:00</updated>
  <id>http://hedleyyan.github.io/</id>
  <author>
    <name><![CDATA[hedley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sed 循环处理]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/12/27/sed-xun-huan-chu-li/"/>
    <updated>2015-12-27T17:38:03+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/12/27/sed-xun-huan-chu-li</id>
    <content type="html"><![CDATA[<p><em>sed</em> 是 <em>shell</em> 编程中很常见的流编辑命令，主要用于批量替换。</p>

<p><em>sed</em> 的默认编辑单位是『行』，如果要处理的信息分布于多个行中，需要考虑多行处理命令：<em>N、P、D</em>。<em><a href="http://www.grymoire.com/Unix/Sed.html#uh-51">click here, nice tutorial</a></em></p>

<p>考虑以下情景：</p>

<pre><code>% cat onetwo                                                                            
one two onw two one two xxx one
two yyy one
two zzz one    
two kkk two one
twx xxx yyy one two one
xxxxx
xxx

yyy one 
x two one
xx one

two x
x one
two one
two
</code></pre>

<p>如果一行以 <em>one</em> 结尾，而且下一行以 <em>two</em> 开头，那么就把这两个邻接行拼接成一行，并把 <em>one two</em> 替换为 <em>1 2</em>。</p>

<p>在只了解 <em>N、P、D</em> 之后，想出一个比较有意思的解决方案：</p>

<pre><code>% cat onetwo.sed
#!/usr/bin/sed -f
/one *$/ {
        # 连接下一行，$!N 表示如果读到最后一行单独处理 
        $!N
        # 替换 prefix + one + 回车符 + two 为 回车符 + prefix + 1 2
        s/^\(.*\)one *\ntwo/\
\11 2/
        /^\n/ !P
        D
}
</code></pre>

<p>表达式 <em>s/a/b/</em> 中，查找字符串 <em>a</em> 如果包含回车符，用 <code>\n</code> 表示。但是如果替换字符串 <em>b</em> 中如果包含回车符，需要用 <code>\ + 回车</code> 表示。并且回车后的替换内容要顶头，不能排版加空格、tab<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>以上解决方案的关键点在于替换时在开头又加了一个<strong>换行符</strong>，如此后面执行 <em>D</em> 则删除了模式空间中的这个<strong>空行</strong>，继续读入下一行处理，以此达到循环处理的目的。</p>

<pre><code>% ./onetwo.sed onetwo
one two onw two one two xxx 1 2 yyy 1 2 zzz 1 2 kkk two one
twx xxx yyy one two one
xxxxx
xxx

yyy one 
x two one
xx one

two x
x 1 2 1 2
</code></pre>

<p>后面了解了 <em>t</em> 命令后，更直接的解决方案如下：</p>

<pre><code>% cat onetwot.sed     
#!/bin/bash 
sed  '
/one/ {
        :again
                $!N
                s/one *\ntwo/1 2/
                t again

}
' $1
</code></pre>

<p><em>t</em> 命令相当于一个 <em>while</em>，当 <em>t</em> 之前最近的一个 <em>s/a/b/</em> 命令匹配成功时，继续循环。得到同样的运行结果。</p>

<p>此小实例只做趣味讨论，<em>shell</em> 中的流处理<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>都是面向<em>行</em><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>为单位的，对于内容有 overlap 的循环处理，效率低且不好用。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>取决于不同的 sed 版本，但是顶头写肯定是 ok 的。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>sed, awk, grep etc..<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>or 块，比如 awk 中的 FS=&lsquo;\n&rsquo;<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
