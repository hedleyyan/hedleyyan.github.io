<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | Hedley]]></title>
  <link href="http://hedleyyan.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://hedleyyan.github.io/"/>
  <updated>2015-06-06T00:24:10+08:00</updated>
  <id>http://hedleyyan.github.io/</id>
  <author>
    <name><![CDATA[dL]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[荒谬痛苦的内部类]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/06/05/huang-miu-tong-ku-de-nei-bu-lei/"/>
    <updated>2015-06-05T11:25:38+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/06/05/huang-miu-tong-ku-de-nei-bu-lei</id>
    <content type="html"><![CDATA[<h2>关于</h2>

<p>此文简单总结嵌套类 <em>(Nested Class)</em> 的使用场景与一般建议：能使用<strong>静态嵌套类</strong> <em>(Static Nested Class)</em> 的时候就不用<strong>内部类</strong> <em>(Inner Class)</em>。</p>

<p><blockquote><p>A nested class is any class whose declaration occurs within the body of another class or interface. A top level class is a class that is not a nested class.</p></blockquote></p>

<!--more-->


<h2>分类定义</h2>

<h4>按位置</h4>

<ul>
<li>成员嵌套类 <em>(Member Nested Class)</em> ：作为外部类 <em>(Enclosing Class)</em> <strong>成员</strong>定义，成员嵌套类有 <em>Enclosing Class</em> 的属性。

<ul>
<li>可以使用 <code>public</code>、 <code>private</code> 等访问控制符，也可以用 <code>static</code>、 <code>final</code> 关键字</li>
</ul>
</li>
<li>局部嵌套类 <em>(Local Nested Class)</em> ：局部嵌套类定义在 <em>Enclosing Class</em> 的方法里面，局部嵌套类有 <em>Enclosing Class</em> 的属性和外部方法 <em>(Enclosing Method)</em> 的属性。

<ul>
<li>可以使用 <code>final</code> 关键字，不能使用访问控制符</li>
<li>局部类不能在外部进行创建，只能在方法调用的时候进行创建</li>
<li><em>Enclosing Class</em> 可以是静态方法，可以是实例方法，也可以是构造器方法或者静态初始化语句块</li>
<li>在 <code>static</code> 上下文定义的局部类，没有指向父类实例变量的引用</li>
</ul>
</li>
<li>匿名嵌套类 <em>(Anonymous Nested Class)</em> ：匿名嵌套类没有显示的定义一个类，直接通过 <code>new</code> 的方法创建类的实例。

<ul>
<li>不使用任何关键字和访问控制符</li>
</ul>
</li>
</ul>


<h4>按功能</h4>

<p>大多数情况下，嵌套类都按功能分为：</p>

<ul>
<li>静态嵌套类 <em>(Static Nested Class)</em> ：<code>static</code> 修饰的<strong>成员嵌套类</strong>。</li>
<li>内部类 <em>(Inner Class)</em> ：静态嵌套类之外所有的嵌套类的总称。

<ul>
<li>内部类不能定义为 <code>static</code>，不能有 <code>static</code> 方法和 <code>static</code> 初始化语句块</li>
<li>可以有 <code>static final</code> 常量属性，但不推荐这么用（放外部类就 OK ，为什么用在这？）</li>
</ul>
</li>
</ul>


<p>所以，局部嵌套类和匿名嵌套类肯定是内部类，成员嵌套类则分为静态嵌套类和内部类。</p>

<p><blockquote><p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers or member interfaces.</p></blockquote></p>

<pre><code class="java">// 嵌套类实例代码，略
</code></pre>

<h2>痛苦场景</h2>

<h4>反射</h4>

<pre><code class="java">public class Outer {
    public static void main(String[] args) throws Exception {
        new Outer().greetWorld();
    }

    private void greetWorld() throws Exception {
        System.out.println(Inner.class.newInstance());
    }

    public class Inner {
        public String toString() {
            return "Hello world";
        }
    }
}
</code></pre>

<p>代码看上去就是一个花样 <em>Hello world</em>，但是当你执行时，<em>Bazinga</em>！</p>

<pre><code>Exception in thread "main" java.lang.InstantiationException: test.Outer$Inner
    at java.lang.Class.newInstance0(Class.java:342)
    at java.lang.Class.newInstance(Class.java:310)
    at test.Outer.greetWorld(Outer.java:10)
    at test.Outer.main(Outer.java:6)
</code></pre>

<p>OK，看来 <em>inner class</em> 持有 <em>enclosing class</em> 的一个实例变量 <em>(immediately enclosing instance)</em> 是真的！编译器没那么牛逼每次都可以悄悄替你做了所有的事，至少在使用反射初始化时， <em>enclosing class</em> 的 <em>instance</em> 不会传进来。</p>

<p><blockquote><p>The constructor of a non-static nested class is compiled such that it has as its first parameter an additional implicit parameter representing the immediately enclosing instance.</p><footer><strong>JLS 13.1</strong></footer></blockquote></p>

<p><blockquote><p>This parameter is passed implicitly when you invoke the constructor from any point in the code where the compiler can find an appropriate enclosing instance. But this applies only when you invoke the constructor normally: nonreflectively.</p><footer><strong>JP Puzzle 80</strong></footer></blockquote></p>

<p>用含参的构造方法测试一下：</p>

<pre><code class="java">private void greetWorld() throws Exception {
       Constructor c = Inner.class.getConstructor(Outer.class);
       System.out.println(c.newInstance(Outer.this));
}
</code></pre>

<p><em>bingo</em>！观察一下，这个场景中为什么要使用 <em>inner class</em> 呢，明明 <em>static nested class</em> 就可以嘛！ <em>so</em> 更帅的解决办法是：</p>

<pre><code class="java">public static class Inner { ... }
</code></pre>

<p><blockquote><p>Unless you have a compelling need for an enclosing instance, prefer static member classes over nonstatic.</p><footer><strong>EJ Item 18</strong></footer></blockquote></p>

<p><strong>建议：能用静态嵌套类解决，就不用内部类。</strong></p>

<h4>泛型</h4>

<pre><code class="java">public class LinkedList&lt;E&gt; {
    private Node&lt;E&gt; head = null;

    private class Node&lt;E&gt; {
        E value;

        Node&lt;E&gt; next;

        // Node constructor links the node as a new head
        Node(E value) {
            this.value = value;
            this.next = head;
            head = this;
        }
    }

    public void add(E e) {
        new Node&lt;E&gt;(e);     // Link node as new head
    }

    public void dump() {
        for (Node&lt;E&gt; n = head; n != null; n = n.next)
            System.out.print(n.value + " ");
    }

    public static void main(String[] args) {
        LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();
        list.add("world");
        list.add("Hello");
        list.dump();
    }
}
</code></pre>

<p>代码看上去就是另一个花样 <em>Hello world</em>，但是当你执行时，<em>Double Bazinga</em>！</p>

<pre><code>Exception in thread "main" java.lang.Error: Unresolved compilation problems: 
    Type mismatch: cannot convert from LinkedList&lt;E&gt;.Node&lt;E&gt; to LinkedList&lt;E&gt;.Node&lt;E&gt;
    Type mismatch: cannot convert from LinkedList&lt;E&gt;.Node&lt;E&gt; to LinkedList&lt;E&gt;.Node&lt;E&gt;

    at test.LinkedList$Node.&lt;init&gt;(LinkedList.java:15)
    at test.LinkedList.add(LinkedList.java:21)
    at test.LinkedList.main(LinkedList.java:32)
</code></pre>

<p><code>LinkedList&lt;E&gt;.Node&lt;E&gt;</code> 和 <code>LinkedList&lt;E&gt;.Node&lt;E&gt;</code> 类型不符？！定位问题代码： <code>this.next = head; head = this;</code>。
前面的 <code>Node&lt;E&gt;</code> 与后面的 <code>Node&lt;E&gt;</code> 虽然看上去一模一样，但它们压根就不是一个类型。具体点说，因为这段代码有两个 <code>&lt;E&gt;</code> 类型声明 <em>(type parameter)</em>，第一个是 <code>LinkedList</code> 的 <code>&lt;E&gt;</code> ，第二个是 <code>LinkedList.Node</code> 的 <code>&lt;E&gt;</code>。后面的 <em><a href="http://hedleyyan.github.io/blog/2015/05/16/a-glossary-of-name-reuse/">Shadow</a></em> 了前面的。</p>

<p>如果这里把 <em>inner class</em> 的声明换一个 <em>type parameter</em> <code>Node&lt;T&gt;</code>，可以看到更多一点的细节：</p>

<pre><code>……
    Type mismatch: cannot convert from LinkedList&lt;E&gt;.Node&lt;E&gt; to LinkedList&lt;E&gt;.Node&lt;T&gt;
    Type mismatch: cannot convert from LinkedList&lt;E&gt;.Node&lt;T&gt; to LinkedList&lt;E&gt;.Node&lt;E&gt;
……
</code></pre>

<p><blockquote><p>An inner class of a generic class has access to the type parameters of its outer class.</p><footer><strong>JP Puzzle 89</strong></footer></blockquote></p>

<p><em>so</em>，<em>inner class</em> 可以访问 <em>enclosing class</em> 的各种属性，包括 <em>type parameter</em> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建记录]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/05/17/octopress-da-jian-ji-lu/"/>
    <updated>2015-05-17T22:29:18+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/05/17/octopress-da-jian-ji-lu</id>
    <content type="html"><![CDATA[<h2>关于</h2>

<p>本文是小站搭建的流水账记录，收集了各种用到的链接地址。</p>

<!--more-->


<h2>搭建</h2>

<ol>
<li>参照 <a href="http://octopress.org/docs/setup/">octopress 官方搭建手册</a>，一步一步来。到 <code>gem install bundler</code> 时候卡壳，网络不通。</li>
<li>修改 <a href="http://ruby.taobao.org/">RubyGems 镜像</a>，连接通了。但是一直报缺少依赖包的异常，按照提示手动一个个安装完依赖包。</li>
<li>安装完毕，修改 <code>_config.yml</code> 配置文件。</li>
</ol>


<h2>云标签</h2>

<ol>
<li>参照 <a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/">Tag Cloud 搭建</a>，clone 几个文件到本地目录。</li>
<li>使用方法：在文件头添加标识 <code>tags: xxx</code> ，但此时无法添加多个标签。</li>
<li><a href="http://my.oschina.net/pangyi/blog/379606">这篇文章</a>给出了解决方案，修改 <code>tags.html</code> 文件去掉 <code>limit</code> 属性，多标签写法 <code>tags: [xx1, xx2]</code> 。</li>
</ol>


<h2>原文链接</h2>

<p>参照<a href="http://my.oschina.net/pangyi/blog/379620">这篇文章</a>，在每篇文章下面自动生成作者信息，原文信息。</p>

<h2>留言系统</h2>

<ol>
<li>参照<a href="http://droidyue.com/blog/2014/07/29/integrate-duoshuo-in-octopress/">这篇文章</a>添加多说评论。</li>
<li><a href="http://shenchaofei.cn/duoshuo-comment-box-css-custom/328.html">修改多说样式</a>，样式代码在多说系统的管理后台 &ndash;> 基本设置里。</li>
</ol>


<p>最后自己做了一些小的调整，样式代码如下
<figure class='code'><figcaption><span> (duoshuo.css)</span> <a href='/downloads/code/duoshuo.css'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#ds-reset</span> <span class="nc">.ds-avatar</span> <span class="nt">img</span><span class="o">,</span><span class="nf">#ds-reset</span> <span class="nc">.ds-avatar</span> <span class="nt">img</span><span class="nd">:hover</span><span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">fill</span><span class="o">-</span><span class="n">mode</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">fill</span><span class="o">-</span><span class="n">mode</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">fill</span><span class="o">-</span><span class="n">mode</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">fill</span><span class="o">-</span><span class="n">mode</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-</span><span class="n">fill</span><span class="o">-</span><span class="n">mode</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0s</span><span class="p">;</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">0.7s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-webkit-keyframes</span> <span class="nt">swing</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">20</span><span class="o">%,</span> <span class="nt">40</span><span class="o">%,</span> <span class="nt">60</span><span class="o">%,</span> <span class="nt">80</span><span class="o">%,</span> <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">-</span><span class="n">origin</span><span class="o">:</span> <span class="k">top</span> <span class="k">center</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">20</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">15</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">40</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-10</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">60</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">5</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">80</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-5</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-moz-keyframes</span> <span class="nt">swing</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">20</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">15</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">40</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-10</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">60</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">5</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">80</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-5</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@-o-keyframes</span> <span class="nt">swing</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">20</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">15</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">40</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-10</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">60</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">5</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">80</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-5</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">swing</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">20</span><span class="o">%</span> <span class="p">{</span> <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">15</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">40</span><span class="o">%</span> <span class="p">{</span> <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-10</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">60</span><span class="o">%</span> <span class="p">{</span> <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">5</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">80</span><span class="o">%</span> <span class="p">{</span> <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">-5</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="n">transform</span><span class="o">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0</span><span class="n">deg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#ds-reset</span> <span class="nc">.ds-avatar</span> <span class="nt">img</span><span class="nd">:hover</span><span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transform</span><span class="o">-</span><span class="n">origin</span><span class="o">:</span> <span class="k">top</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transform</span><span class="o">-</span><span class="n">origin</span><span class="o">:</span> <span class="k">top</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transform</span><span class="o">-</span><span class="n">origin</span><span class="o">:</span> <span class="k">top</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="n">transform</span><span class="o">-</span><span class="n">origin</span><span class="o">:</span> <span class="k">top</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">name</span><span class="o">:</span> <span class="n">swing</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">name</span><span class="o">:</span> <span class="n">swing</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">animation</span><span class="o">-</span><span class="n">name</span><span class="o">:</span> <span class="n">swing</span><span class="p">;</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-</span><span class="n">name</span><span class="o">:</span> <span class="n">swing</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/*评论背景的边角默认是直角，如果想改成圆角*/</span>
</span><span class='line'><span class="nf">#ds-thread</span><span class="p">{</span> <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/*定义评论框内字体和颜色*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nc">.ds-textarea-wrapper</span> <span class="nt">textarea</span><span class="o">,</span> <span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nc">.ds-textarea-wrapper</span> <span class="nc">.ds-hidden-text</span> <span class="p">{</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’</span> <span class="err">‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;</span><span class="k">font-size</span><span class="o">:</span><span class="m">12px</span><span class="p">;</span><span class="k">letter-spacing</span><span class="o">:</span><span class="m">1px</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*修改评论正文的字体颜色*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nc">.ds-comment-body</span> <span class="nt">p</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#030303</span><span class="p">;</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’</span> <span class="err">‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;</span><span class="k">font-size</span><span class="o">:</span><span class="m">14px</span><span class="p">;</span><span class="k">letter-spacing</span><span class="o">:</span><span class="m">1px</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*定义发布按钮字体，以及渐变色背景*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nc">.ds-post-button</span><span class="p">{</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;</span><span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span><span class="k">font-size</span><span class="o">:</span><span class="m">12px</span><span class="p">;</span><span class="m">1</span><span class="o">:</span><span class="k">none</span> <span class="cp">!important</span><span class="p">;</span><span class="k">color</span><span class="o">:</span><span class="m">#49976b</span> <span class="cp">!important</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/*隐藏评论右上方 最热 最新排序按钮*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nc">.ds-sort</span> <span class="p">{</span><span class="k">display</span><span class="o">:</span><span class="k">none</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*隐藏底部多说版权*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nc">.ds-powered-by</span><span class="p">{</span><span class="k">display</span><span class="o">:</span><span class="k">none</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*将评论框底部的分享到微博QQ空间什么的隐藏起来*/</span>
</span><span class='line'><span class="nc">.ds-sync</span><span class="p">{</span><span class="k">display</span><span class="o">:</span><span class="k">none</span> <span class="cp">!important</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*隐藏评论左上方 评论总数背景色及边框 和一些设置*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nt">li</span><span class="nc">.ds-tab</span> <span class="nt">a</span><span class="nc">.ds-current</span><span class="p">{</span><span class="k">background</span><span class="o">:</span><span class="k">none</span><span class="p">;</span><span class="k">border</span><span class="o">:</span><span class="k">none</span><span class="p">;</span><span class="k">font-size</span><span class="o">:</span> <span class="m">22px</span><span class="p">;</span><span class="k">font-weight</span><span class="o">:</span> <span class="m">400</span><span class="p">;</span><span class="k">color</span><span class="o">:</span> <span class="m">#999</span><span class="p">;</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;</span><span class="k">letter-spacing</span><span class="o">:</span><span class="m">1px</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">/*定义高亮字体颜色*/</span>
</span><span class='line'><span class="nf">#ds-reset</span> <span class="nc">.ds-highlight</span><span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="m">#49976b</span> <span class="cp">!important</span><span class="p">;</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’</span> <span class="err">‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*定义评论框内其他高亮颜色*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nf">#ds-bubble</span> <span class="nt">a</span><span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#49976b</span> <span class="cp">!important</span><span class="p">;</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’</span> <span class="err">‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*定义评论框内其他高亮颜色*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nf">#ds-bubble</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#49976b</span> <span class="cp">!important</span><span class="p">;</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’</span> <span class="err">‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*定义评论框内其他高亮颜色*/</span>
</span><span class='line'><span class="nf">#ds-reset</span> <span class="nf">#ds-ctx</span> <span class="nc">.ds-ctx-entry</span> <span class="nc">.ds-ctx-head</span> <span class="nt">a</span><span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#49976b</span> <span class="cp">!important</span><span class="p">;</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’</span> <span class="err">‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*定义评论框内其他高亮颜色*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nt">a</span><span class="nc">.ds-comment-context</span><span class="nd">:hover</span><span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#49976b</span> <span class="cp">!important</span><span class="p">;</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’</span> <span class="err">‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;}</span>
</span><span class='line'><span class="c">/*定义评论框内其他高亮颜色*/</span>
</span><span class='line'><span class="nf">#ds-thread</span> <span class="nf">#ds-reset</span> <span class="nt">a</span><span class="nc">.ds-comment-context</span><span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#49976b</span> <span class="cp">!important</span><span class="p">;</span><span class="k">font-family</span><span class="o">:</span> <span class="err">‘微软雅黑’</span> <span class="err">‘</span><span class="n">Microsoft</span> <span class="n">Yahei</span><span class="err">’</span><span class="cp">!important</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>访问速度</h2>

<ol>
<li>参照<a href="http://droidyue.com/blog/2014/06/22/fix-octopress-slow-loading-speed-issue-in-china-mainland/">这篇文章</a>替换若干 google 源。</li>
<li>所有修改的源文件做好相应备份，相应目录下添加 <code>.bak</code> 备份文件。</li>
</ol>


<h2>其他</h2>

<ol>
<li>链接在新窗口打开、列表排版、<em>404ERROR</em> 公益页面，参考<a href="http://blog.csdn.net/biaobiaoqi/article/details/9289563">这篇文章</a>。</li>
<li>文章分类侧边栏、导航栏设置，参考<a href="http://www.jianshu.com/p/0ac2ac1a8e45">这篇文章</a>。</li>
</ol>


<h2>ST 书写插件</h2>

<ol>
<li>Octopress ： 可以在 ST 中快捷新建 Post， 快捷生成、部署。</li>
<li>Octopress Snippets ： <code>CMD + SHIFT + P</code> 接输入 <code>Snippet</code> ，调用语法模板。</li>
<li>Markdown Extended ： <code>CMD + SHIFT + P</code> 接输入 <code>Set Syntax</code> ，设为 <code>Markdown Extended</code>。代码片段彩色显示。</li>
<li>Markdown Preview ： 主要用到 <code>Preview in browser</code> 来进行静态预览，以及 <code>cheat sheet</code> 来查看语法。</li>
<li>Monokai Neue ： <code>Color Scheme</code> 修改， Markdown 颜色显示。修改 <code>/Packages/Monokai Neue/Monokai-Neue.tmTheme</code> 文件，在 <code>settings -&gt; settings</code> 代码段下修改 <code>&lt;key&gt;selection&lt;/key&gt; &lt;string&gt;#00B2EE&lt;/string&gt;</code>，更改选中背景颜色。</li>
</ol>


<p>效果如下
<img src="/images/Snip20150525_38.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Glossary of Name Reuse]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/05/16/a-glossary-of-name-reuse/"/>
    <updated>2015-05-16T17:07:57+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/05/16/a-glossary-of-name-reuse</id>
    <content type="html"><![CDATA[<h2>关于</h2>

<p>此文大概就是《Java Puzzlers》中 <em>Classier Pazzlers</em> 一节的简单翻译和整理，粗略总结了 <em>Java</em> 有关<strong>命名重复</strong>的场景和代码示例。</p>

<!--more-->


<h2>Overriding</h2>

<p><blockquote><p>An instance method overrides all accessible instance methods with the same signature in superclasses.</p><footer><strong>JLS 8.4.8.1</strong></footer></blockquote></p>

<p>重写的规范定义包括：</p>

<ul>
<li>Context 包括两个类，一个子类，一个父类。</li>
<li>载体必须是实例方法 <em>(instance methods)</em>，而非静态方法。</li>
<li>必须是同样签名 <em>(signature)</em>，包括参数、返回类型。</li>
<li>重写方法不能缩小可见范围。</li>
</ul>


<p>重写是面向对象编程的核心概念，是<strong>唯一</strong>鼓励使用的 <em>Name Reuse</em> 场景。</p>

<pre><code class="java">    class Base {
        protected void f() { }
    }

    class Derived extends Base {
        public void f() { } // overrrides Base.f()
    }
</code></pre>

<h2>Overloading</h2>

<p><blockquote><p>Methods in a class overload one another if they have the same name and different signatures.</p><footer><strong>JLS 8.4.9</strong></footer></blockquote></p>

<p>重载和重写是 <em>Name Reuse</em> 出现最多的场景。相对于重写，重载规范包括：</p>

<ul>
<li>Context 只有一个类。</li>
<li>载体可以是实例方法，也可以是静态方法。</li>
<li>拥有不同的签名。

<ul>
<li>但不能是参数相同，返回类型不同。</li>
</ul>
</li>
</ul>


<pre><code class="java">    class CircuitBreaker {
        public void f(int i)    { }  // int overloading
        public void f(String s) { }  // String overloading
    } 
</code></pre>

<h2>Hiding</h2>

<p><blockquote><p>A field, static method, or member type hides all accessible fields, static methods, or member types, respectively, with the same name (or, for methods, signature) in supertypes. Hiding a member prevents it from being inherited.</p><footer><strong>JLS 8.3-8.5</strong></footer></blockquote></p>

<p><em>Hiding</em> 和 <em>Overriding</em> 场景比较像，<em>Overriding</em> 的载体是实例方法，而 <em>Hiding</em> 的载体是除去实例方法以外的其他所有元素。</p>

<ul>
<li>Context 包括子类和父类。</li>
<li>载体包括属性、静态方法、成员类。</li>
<li>同样签名。</li>
<li>可见范围无约束。</li>
</ul>


<pre><code class="java">    class Base {
        public String className = "Base";
    }

    class Derived extends Base {
        private String className = "Derived";
    }

    public class PrivateMatter {
        public static void main(String[] args) {
            System.out.println(new Derived().className);
        }
    }
</code></pre>

<p>️️️代码结果</p>

<pre><code>PrivateMatter.java:11: className has private access in Derived
           System.out.println(new Derived().className);
</code></pre>

<p>很明显，<em>Hiding</em> 的代码是晦涩难懂的，更重要的是它破坏了 <em>Liskov</em> 替换原则。应极力避免这种 <em>Name Reuse</em> 场景。</p>

<p><blockquote><p>Everything you can do with a base class, you can also do with a derived class.</p><footer><strong>Liskov Substitution Principle</strong></footer></blockquote></p>

<h2>Shadowing</h2>

<p><blockquote><p>A variable, method, or type shadows all variables, methods, or types, respectively, with the same name in a textually enclosing scope.</p><footer><strong>JLS 6.3.1</strong></footer></blockquote></p>

<ul>
<li>Context 可能只有一个类，也可能包括别的函数库的类。</li>
<li>载体包括变量、方法、类、类型声明 <em>(<T>)</em>。</li>
</ul>


<pre><code class="java">    class WhoKnows {
        static String sentence = "I don’t know.";
        public static void main(String[] args) {
            String sentence = "I know!";   // shadows static field
            System.out.println(sentence);  // prints local variable
        }
    }
</code></pre>

<pre><code class="java">public class StrungOut {
       public static void main(String[] args) {
           String s = new String("Hello world");
           System.out.println(s);
       }
}

class String {
        private final java.lang.String s;
        public String(java.lang.String s) {
            this.s = s;
        }
        public java.lang.String toString() {
            return s;
        } 
}
</code></pre>

<p>代码结果</p>

<pre><code>Exception in thread "main" java.lang.NoSuchMethodError: main
</code></pre>

<p>产生 <em>Shadowing</em> 场景的 <em>Name Reuse</em> ，依最近的作用域来判定是哪个元素有效。</p>

<h2>Obscuring</h2>

<p><em>Obscuring</em> 是指在作用域中，一个变量的名字和一个类相同，直接看示例代码。</p>

<pre><code class="java">public class Obscure {
    static String System; // Obscures type java.lang.System
    public static void main(String[] args) {
        // Next line won’t compile:  System refers to static field 
        System.out.println("hello, obscure world!");
    }
}
</code></pre>

<p><blockquote><p>If a type or a package is obscured, you cannot refer to it by its simple name except in a context where the syntax allows only a name from its namespace.</p></blockquote></p>

<h2>常见陷阱</h2>

<h2>总结</h2>

<ol>
<li>除了 <em>Override</em> ，尽量避免 <em>Name Reuse</em> 。</li>
<li>遵守 <em>Java</em> 命名规则，可以避免 <em>Obscuring</em> 。</li>
<li>避免和 <code>java.lang</code> 类库中的命名冲突。</li>
</ol>


<!--链接-->

]]></content>
  </entry>
  
</feed>
