<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hedley]]></title>
  <link href="http://hedleyyan.github.io/atom.xml" rel="self"/>
  <link href="http://hedleyyan.github.io/"/>
  <updated>2015-05-20T18:42:11+08:00</updated>
  <id>http://hedleyyan.github.io/</id>
  <author>
    <name><![CDATA[dL]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建记录]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/05/17/octopress-da-jian-ji-lu/"/>
    <updated>2015-05-17T22:29:18+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/05/17/octopress-da-jian-ji-lu</id>
    <content type="html"><![CDATA[<p class='post-footer'>
            original link:
            <a href='http://hedleyyan.github.io/blog/2015/05/17/octopress-da-jian-ji-lu/'>http://hedleyyan.github.io/blog/2015/05/17/octopress-da-jian-ji-lu/</a><br/>
            written by <a href='http://hedleyyan.github.io'>dL</a>
            &nbsp;posted at <a href='http://hedleyyan.github.io'>http://hedleyyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Glossary of Name Reuse]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/05/16/a-glossary-of-name-reuse/"/>
    <updated>2015-05-16T17:07:57+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/05/16/a-glossary-of-name-reuse</id>
    <content type="html"><![CDATA[<h2>关于</h2>

<p>此文大概就是《Java Puzzlers》中 Classier Pazzlers 一节的简单翻译和整理，粗略总结了 Java 有关<strong>命名重复</strong>的场景和代码示例。</p>

<!--more-->


<h2>Overriding</h2>

<blockquote><p>An instance method overrides all accessible instance methods with the same signature in superclasses.</p><footer><strong>JLS 8.4.8.1</strong></footer></blockquote>


<p>重写的规范定义包括：</p>

<ul>
<li>Context 包括两个类，一个子类，一个父类。</li>
<li>载体必须是实例方法 (instance methods)，而非静态方法。</li>
<li>必须是同样签名 (signature)，包括参数、返回类型。</li>
<li>重写方法不能缩小可见范围。</li>
</ul>


<p>重写是面向对象编程的核心概念，是<strong>唯一</strong>鼓励使用的 Name Reuse 场景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Base</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Derived</span> <span class="kd">extends</span> <span class="n">Base</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span> <span class="c1">// overrrides Base.f()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Overloading</h2>

<blockquote><p>Methods in a class overload one another if they have the same name and different signatures.</p><footer><strong>JLS 8.4.9</strong></footer></blockquote>


<p>重载和重写是 Name Reuse 出现最多的场景。相对于重写，重载规范包括：</p>

<ul>
<li>Context 只有一个类。</li>
<li>载体可以是实例方法，也可以是静态方法。</li>
<li>拥有不同的签名。

<ul>
<li>但不能是参数相同，返回类型不同。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">CircuitBreaker</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>    <span class="o">{</span> <span class="o">}</span>  <span class="c1">// int overloading</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>  <span class="c1">// String overloading</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Hiding</h2>

<blockquote><p>A field, static method, or member type hides all accessible fields, static methods, or member types, respectively, with the same name (or, for methods, signature) in supertypes. Hiding a member prevents it from being inherited.</p><footer><strong>JLS 8.3-8.5</strong></footer></blockquote>


<p>Hiding 和重写场景比较像，重写的载体是实例方法，而 Hiding 的载体是除去实例方法以外的其他所有元素。</p>

<ul>
<li>Context 包括子类和父类。</li>
<li>载体包括属性、静态方法、成员类。</li>
<li>同样签名。</li>
<li>可见范围无约束。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Base</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="s">&quot;Base&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Derived</span> <span class="kd">extends</span> <span class="n">Base</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="s">&quot;Derived&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrivateMatter</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nf">Derived</span><span class="o">().</span><span class="na">className</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>️️️代码结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PrivateMatter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">11</span><span class="o">:</span> <span class="n">className</span> <span class="n">has</span> <span class="kd">private</span> <span class="n">access</span> <span class="n">in</span> <span class="n">Derived</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nf">Derived</span><span class="o">().</span><span class="na">className</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显，Hiding 的代码是晦涩难懂的，更重要的是它破坏了 Liskov 替换原则。应极力避免这种 Name Reuse 场景。</p>

<blockquote><p>Everything you can do with a base class, you can also do with a derived class.</p><footer><strong>Liskov Substitution Principle</strong></footer></blockquote>


<h2>Shadowing</h2>

<blockquote><p>A variable, method, or type shadows all variables, methods, or types, respectively, with the same name in a textually enclosing scope.</p><footer><strong>JLS 6.3.1</strong></footer></blockquote>


<ul>
<li>Context 可能只有一个类，也可能包括别的函数库的类。</li>
<li>载体包括变量、方法和类。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">WhoKnows</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">String</span> <span class="n">sentence</span> <span class="o">=</span> <span class="s">&quot;I don’t know.&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">sentence</span> <span class="o">=</span> <span class="s">&quot;I know!&quot;</span><span class="o">;</span>   <span class="c1">// shadows static field</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sentence</span><span class="o">);</span>  <span class="c1">// prints local variable</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StrungOut</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">&quot;Hello world&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">String</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">String</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NoSuchMethodError</span><span class="o">:</span> <span class="n">main</span>
</span></code></pre></td></tr></table></div></figure>


<p>产生 Shadowing 场景的 Name Reuse，依最近的作用域来判定是哪个元素有效。</p>

<h2>Obscuring</h2>

<p>Obscuring 是指在作用域中，一个变量的名字和一个类相同，直接看示例代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Obscure</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">String</span> <span class="n">System</span><span class="o">;</span> <span class="c1">// Obscures type java.lang.System</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Next line won’t compile:  System refers to static field </span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hello, obscure world!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>If a type or a package is obscured, you cannot refer to it by its simple name except in a context where the syntax allows only a name from its namespace.</p></blockquote>


<h2>常见陷阱</h2>

<h2>总结</h2>

<ol>
<li>除了 Override，尽量避免 Name Reuse。</li>
<li>遵守 Java 命名规则，可以避免 Obscuring。</li>
</ol>


<!--链接-->


<p class='post-footer'>
            original link:
            <a href='http://hedleyyan.github.io/blog/2015/05/16/a-glossary-of-name-reuse/'>http://hedleyyan.github.io/blog/2015/05/16/a-glossary-of-name-reuse/</a><br/>
            written by <a href='http://hedleyyan.github.io'>dL</a>
            &nbsp;posted at <a href='http://hedleyyan.github.io'>http://hedleyyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/05/09/hello-world/"/>
    <updated>2015-05-09T22:45:12+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/05/09/hello-world</id>
    <content type="html"><![CDATA[<!--图片-->


<p><img src="http://placekitten.com/890/280"></p>

<!--more-->


<!--more以上是摘要-->


<p><img src="http://placekitten.com/890/280" title="Cats IMP" alt="cats" /></p>

<p>Hello World!</p>

<!--注释-->


<blockquote><p>夏天就得吃大串</p><footer><strong>hedley</strong> <cite>DL SAMA</cite></footer></blockquote>




<!--代码片-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:imathis/octopress.git # fork octopress</span></code></pre></td></tr></table></div></figure>


<p><span class='pullquote-right' data-pullquote='surround it like this'>
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that&rsquo;s all there is to it.
</span></p>

<h1>H1标题</h1>

<p>H1 text.</p>

<ul>
<li>哈喽</li>
<li>也楼</li>
</ul>


<h2>H2标题</h2>

<p>H2 text.</p>

<h3>H3标题</h3>

<p>H3 text.</p>

<h4>H4标题</h4>

<p>Use the <code>printf()</code> function.</p>

<h5>H5标题</h5>

<p>Visit <a href="http://daringfireball.net/">Daring Fireball</a> for more information.</p>

<p><em>single asterisks</em>
<strong>double asterisks</strong></p>

<p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from
<a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>

<!--代码文件-->


<figure class='code'><figcaption><span> (LocalizationCheckTool.java)</span> <a href='http://hedleyyan.github.io/downloads/code/LocalizationCheckTool.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">repair</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 多语言检查工具.</span>
</span><span class='line'><span class="cm"> * 使用前需要将ROOTPATH配成本地路径</span>
</span><span class='line'><span class="cm"> * 开发一般只需要设置1和2</span>
</span><span class='line'><span class="cm"> * ROOTPATH1的本地地址对应的SVN地址为： http://svn.xinggeq.com/svn/chaos/trunk/Server/Project/SFS2X/languages-AOE</span>
</span><span class='line'><span class="cm"> * ROOTPATH2的本地地址对应的SVN地址为： http://svn.xinggeq.com/svn/chaos/trunk/Server/Project/SFS2X/database/ChaosAge/languages</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * 若检测翻译端是否有翻译语法错误还要配3和4</span>
</span><span class='line'><span class="cm"> * ROOTPATH3的本地地址对应的SVN地址为：http://svn.xinggeq.com/svn/chaos/trunk/Docs/Product/Localization/Develop/Server/languages-AOE</span>
</span><span class='line'><span class="cm"> * ROOTPATH4的本地地址对应的SVN地址为：http://svn.xinggeq.com/svn/chaos/trunk/Docs/Product/Localization/Develop/Server/Task/languages</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author yandeli</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalizationCheckTool</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">EXT</span> <span class="o">=</span> <span class="s">&quot;.properties&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 文件本地base路径</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ROOTPATH1</span> <span class="o">=</span> <span class="s">&quot;/Users/hedley/Elex/多语言/多语言_服务端_AOE/&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ROOTPATH2</span> <span class="o">=</span> <span class="s">&quot;/Users/hedley/Elex/多语言/多语言_服务端_TASK/&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ROOTPATH3</span> <span class="o">=</span> <span class="s">&quot;/Users/hedley/Elex/多语言/多语言_翻译端/languages-AOE/&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ROOTPATH4</span> <span class="o">=</span> <span class="s">&quot;/Users/hedley/Elex/多语言/多语言_翻译端/Task/languages/&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">BASE</span> <span class="o">=</span> <span class="s">&quot;en&quot;</span><span class="o">;</span> <span class="c1">// 对比基准语言</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">OTHERFILELISTS</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="s">&quot;ks&quot;</span><span class="o">,</span> <span class="s">&quot;cn&quot;</span><span class="o">,</span> <span class="s">&quot;en&quot;</span><span class="o">,</span> <span class="s">&quot;ru&quot;</span><span class="o">,</span> <span class="s">&quot;es&quot;</span><span class="o">,</span> <span class="s">&quot;de&quot;</span><span class="o">,</span> <span class="s">&quot;ks&quot;</span><span class="o">,</span> <span class="s">&quot;fr&quot;</span><span class="o">,</span> <span class="s">&quot;it&quot;</span><span class="o">,</span> <span class="s">&quot;jp&quot;</span><span class="o">,</span> <span class="s">&quot;nl&quot;</span><span class="o">,</span> <span class="s">&quot;pl&quot;</span><span class="o">,</span> <span class="s">&quot;pt&quot;</span><span class="o">,</span> <span class="s">&quot;tk&quot;</span><span class="o">,</span> <span class="s">&quot;tw&quot;</span>
</span><span class='line'>    <span class="o">};</span> <span class="c1">// Other Files，对应ROOTPATH1和3</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">TASKFILELISTS</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="s">&quot;ks&quot;</span><span class="o">,</span> <span class="s">&quot;cn&quot;</span><span class="o">,</span> <span class="s">&quot;en&quot;</span><span class="o">,</span> <span class="s">&quot;ru&quot;</span><span class="o">,</span> <span class="s">&quot;es&quot;</span><span class="o">,</span> <span class="s">&quot;de&quot;</span><span class="o">,</span> <span class="s">&quot;ks&quot;</span><span class="o">,</span> <span class="s">&quot;fr&quot;</span><span class="o">,</span> <span class="s">&quot;it&quot;</span><span class="o">,</span> <span class="s">&quot;jp&quot;</span><span class="o">,</span> <span class="s">&quot;nl&quot;</span><span class="o">,</span> <span class="s">&quot;pl&quot;</span><span class="o">,</span> <span class="s">&quot;pt&quot;</span><span class="o">,</span> <span class="s">&quot;th&quot;</span><span class="o">,</span> <span class="s">&quot;tw&quot;</span>
</span><span class='line'>    <span class="o">};</span> <span class="c1">// Task Files, 对应ROOTPATH2和4</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FLAG_TASK</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 任务多语言标记</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FLAG_OTHER</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 其他多语言标记</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FLAG_SERVER</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 服务器端标记</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">FLAG_DOC</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="c1">// 翻译端标记</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * &lt;pre&gt;</span>
</span><span class='line'><span class="cm">     * 开发人员检测多语言是否和基准对比语言有冲突，</span>
</span><span class='line'><span class="cm">     * 只需要调用innerCheck(FLAG_SERVER, FLAG_OTHER)或innerCheck(FLAG_SERVER, FLAG_TASK)</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * date: 2014年5月23日</span>
</span><span class='line'><span class="cm">     * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm">     * @author yandeli</span>
</span><span class='line'><span class="cm">     * @param args</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//        biCheck(FLAG_TASK);</span>
</span><span class='line'><span class="c1">//               biCheck(FLAG_OTHER);</span>
</span><span class='line'><span class="c1">//        innerCheck(FLAG_SERVER, FLAG_OTHER);</span>
</span><span class='line'><span class="c1">//        innerCheck(FLAG_SERVER, FLAG_TASK);</span>
</span><span class='line'>        <span class="n">innerCheck</span><span class="o">(</span><span class="n">FLAG_DOC</span><span class="o">,</span> <span class="n">FLAG_OTHER</span><span class="o">);</span>
</span><span class='line'><span class="c1">//        innerCheck(FLAG_DOC, FLAG_TASK);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 服务器端或翻译端所有文件和基准文件对比检测</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param portFlag</span>
</span><span class='line'><span class="cm">     *           端标识</span>
</span><span class='line'><span class="cm">     * @param langflag</span>
</span><span class='line'><span class="cm">     *           语言标识</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">innerCheck</span><span class="o">(</span><span class="kt">int</span> <span class="n">portFlag</span><span class="o">,</span> <span class="kt">int</span> <span class="n">langflag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">base</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">tCodes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">langflag</span> <span class="o">==</span> <span class="n">FLAG_TASK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">tCodes</span> <span class="o">=</span> <span class="n">TASKFILELISTS</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">portFlag</span> <span class="o">==</span> <span class="n">FLAG_SERVER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span> <span class="o">=</span> <span class="n">ROOTPATH2</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">portFlag</span> <span class="o">==</span> <span class="n">FLAG_DOC</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span> <span class="o">=</span> <span class="n">ROOTPATH4</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;YOU HAVE ENTERED WRONG PORTFLAG, PLS RECHECK!&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">langflag</span> <span class="o">==</span> <span class="n">FLAG_OTHER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">tCodes</span> <span class="o">=</span> <span class="n">OTHERFILELISTS</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">portFlag</span> <span class="o">==</span> <span class="n">FLAG_SERVER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span> <span class="o">=</span> <span class="n">ROOTPATH1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">portFlag</span> <span class="o">==</span> <span class="n">FLAG_DOC</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">base</span> <span class="o">=</span> <span class="n">ROOTPATH3</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;YOU HAVE ENTERED WRONG PORTFLAG, PLS RECHECK!&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;YOU HAVE ENTERED WRONG LANGFLAG, PLS RECHECK!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">sFile</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">BASE</span> <span class="o">+</span> <span class="n">EXT</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">tFiles</span> <span class="o">=</span> <span class="n">parseToFullPath</span><span class="o">(</span><span class="n">base</span><span class="o">,</span> <span class="n">tCodes</span><span class="o">);</span>
</span><span class='line'>        <span class="n">checkMultiTargets</span><span class="o">(</span><span class="n">sFile</span><span class="o">,</span> <span class="n">tFiles</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 两端多语言文件一一对比</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param flag</span>
</span><span class='line'><span class="cm">     *           语言标识</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">biCheck</span><span class="o">(</span><span class="kt">int</span> <span class="n">langFlag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">sFiles</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span> <span class="n">tFiles</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">langFlag</span> <span class="o">==</span> <span class="n">FLAG_OTHER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sFiles</span> <span class="o">=</span> <span class="n">parseToFullPath</span><span class="o">(</span><span class="n">ROOTPATH3</span><span class="o">,</span> <span class="n">OTHERFILELISTS</span><span class="o">);</span>
</span><span class='line'>            <span class="n">tFiles</span> <span class="o">=</span> <span class="n">parseToFullPath</span><span class="o">(</span><span class="n">ROOTPATH1</span><span class="o">,</span> <span class="n">OTHERFILELISTS</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">langFlag</span> <span class="o">==</span> <span class="n">FLAG_TASK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sFiles</span> <span class="o">=</span> <span class="n">parseToFullPath</span><span class="o">(</span><span class="n">ROOTPATH4</span><span class="o">,</span> <span class="n">TASKFILELISTS</span><span class="o">);</span>
</span><span class='line'>            <span class="n">tFiles</span> <span class="o">=</span> <span class="n">parseToFullPath</span><span class="o">(</span><span class="n">ROOTPATH2</span><span class="o">,</span> <span class="n">TASKFILELISTS</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;YOU HAVE ENTERED WRONG LANGFLAG, PLS RECHECK!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sFiles</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">checkSingleTarget</span><span class="o">(</span><span class="n">sFiles</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">tFiles</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">checkSingleTarget</span><span class="o">(</span><span class="n">tFiles</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">sFiles</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 单个目标文件与源文件做对比</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param targetFilePath</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">checkSingleTarget</span><span class="o">(</span><span class="n">String</span> <span class="n">sourceFilePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">targetFilePath</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">sKeyToWizard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">tKeyToWizard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">errInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">sKeyToWizard</span> <span class="o">=</span> <span class="n">initFile</span><span class="o">(</span><span class="n">sourceFilePath</span><span class="o">);</span>
</span><span class='line'>        <span class="n">tKeyToWizard</span> <span class="o">=</span> <span class="n">initFile</span><span class="o">(</span><span class="n">targetFilePath</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">sKeyToWizard</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">sWizardStr</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">tWizardStr</span> <span class="o">=</span> <span class="n">tKeyToWizard</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">tWizardStr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;WARNING: File --&quot;</span> <span class="o">+</span> <span class="n">targetFilePath</span> <span class="o">+</span> <span class="s">&quot;--    LACK KEY  :  &quot;</span> <span class="o">+</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>                <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">sWizardStr</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">tWizardStr</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">errInfo</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;ERROR: File --&quot;</span> <span class="o">+</span> <span class="n">targetFilePath</span> <span class="o">+</span> <span class="s">&quot;--    WRONG WIZARD WITH KEY  :  &quot;</span> <span class="o">+</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">errInfo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 多目标文件与源文件对比</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param targetFilePaths</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">checkMultiTargets</span><span class="o">(</span><span class="n">String</span> <span class="n">sourceFilePath</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">targetFilePaths</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">sKeyToWizard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">tKeyToWizard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">errInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">sKeyToWizard</span> <span class="o">=</span> <span class="n">initFile</span><span class="o">(</span><span class="n">sourceFilePath</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">targetFilePaths</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">tKeyToWizard</span> <span class="o">=</span> <span class="n">initFile</span><span class="o">(</span><span class="n">targetFilePaths</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">sKeyToWizard</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">sWizardStr</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">tWizardStr</span> <span class="o">=</span> <span class="n">tKeyToWizard</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">tWizardStr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;WARNING: File --&quot;</span> <span class="o">+</span> <span class="n">targetFilePaths</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;--    LACK KEY  :  &quot;</span> <span class="o">+</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">sWizardStr</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">tWizardStr</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">errInfo</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;ERROR: File --&quot;</span> <span class="o">+</span> <span class="n">targetFilePaths</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;--    WRONG WIZARD WITH KEY  :  &quot;</span> <span class="o">+</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">tKeyToWizard</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">errInfo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 解析key对应的字符串</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param string</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">parseWizardsStr</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">ret</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// 若包含 &#39;$&#39;字符，为扩展的通配法则，单独处理</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;$&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">_parseWizardStrExt</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">string</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;%&#39;</span> <span class="o">!=</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">string</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kt">char</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// 匹配 %d %s %f</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;d&#39;</span> <span class="o">==</span> <span class="n">c2</span> <span class="o">||</span> <span class="sc">&#39;s&#39;</span> <span class="o">==</span> <span class="n">c2</span> <span class="o">||</span> <span class="sc">&#39;f&#39;</span> <span class="o">==</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">c2</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// 匹配%.2f</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;.&#39;</span> <span class="o">==</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">&gt;=</span> <span class="n">string</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="kt">char</span> <span class="n">c3</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>                <span class="kt">char</span> <span class="n">c4</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;0&#39;</span> <span class="o">&lt;=</span> <span class="n">c3</span> <span class="o">&amp;&amp;</span> <span class="sc">&#39;9&#39;</span> <span class="o">&gt;=</span> <span class="n">c3</span> <span class="o">&amp;&amp;</span> <span class="sc">&#39;f&#39;</span> <span class="o">==</span> <span class="n">c4</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">c2</span> <span class="o">+</span> <span class="n">c3</span> <span class="o">+</span> <span class="n">c4</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 解析含有&#39;$&#39;字符的key对应的字符串</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param string</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">_parseWizardStrExt</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">c</span><span class="o">,</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">ret</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">posToChar</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">string</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;%&#39;</span> <span class="o">!=</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// &#39;%&#39; 后第一个 &#39;$&#39;的位置</span>
</span><span class='line'>            <span class="n">Character</span> <span class="n">flag</span> <span class="o">=</span> <span class="sc">&#39; &#39;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">sub</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">string</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;$&#39;</span> <span class="o">!=</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">pos</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">flag</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// .2f适配</span>
</span><span class='line'>                    <span class="n">sub</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">sub</span> <span class="o">=</span> <span class="n">flag</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">string</span><span class="o">.</span><span class="na">subSequence</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">pos</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="n">posToChar</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">sub</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">posToChar</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span> <span class="o">+</span> <span class="sc">&#39;%&#39;</span> <span class="o">+</span> <span class="n">posToChar</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 初始化文件,返回&lt;key,解析后的字符串&gt;类型的Hash表</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param fileName</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">initFile</span><span class="o">(</span><span class="n">String</span> <span class="n">fileName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>        <span class="n">FileReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">buffer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">keyToWizard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">keyValuePair</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileReader</span><span class="o">(</span><span class="n">fileName</span><span class="o">);</span>
</span><span class='line'>            <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// 对源文件逐行解析</span>
</span><span class='line'>            <span class="n">line</span> <span class="o">=</span> <span class="n">buffer</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">line</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;#&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">line</span> <span class="o">=</span> <span class="n">buffer</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="c1">// 判断key/value分隔符是 &#39;=&#39; 还是 &#39;:&#39;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">reg</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;=&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">?</span> <span class="s">&quot;:&quot;</span> <span class="o">:</span> <span class="n">line</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">?</span> <span class="s">&quot;=&quot;</span> <span class="o">:</span> <span class="n">line</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;=&quot;</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">line</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">)</span> <span class="o">?</span> <span class="s">&quot;=&quot;</span> <span class="o">:</span> <span class="s">&quot;:&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="n">keyValuePair</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="n">reg</span><span class="o">);</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">keyValuePair</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">tmp</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">keyValuePair</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">tmp</span> <span class="o">+=</span> <span class="n">keyValuePair</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">wizardStr</span> <span class="o">=</span> <span class="n">parseWizardsStr</span><span class="o">(</span><span class="n">tmp</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">key</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">keyToWizard</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">wizardStr</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">line</span> <span class="o">=</span> <span class="n">buffer</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">buffer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">buffer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">buffer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">keyToWizard</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">parseToFullPath</span><span class="o">(</span><span class="n">String</span> <span class="n">base</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">targets</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">targets</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">targets</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ret</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">targets</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">EXT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--引用-->


<p class='post-footer'>
            original link:
            <a href='http://hedleyyan.github.io/blog/2015/05/09/hello-world/'>http://hedleyyan.github.io/blog/2015/05/09/hello-world/</a><br/>
            written by <a href='http://hedleyyan.github.io'>dL</a>
            &nbsp;posted at <a href='http://hedleyyan.github.io'>http://hedleyyan.github.io</a>
            </p>

]]></content>
  </entry>
  
</feed>
