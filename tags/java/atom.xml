<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Java | Hedley]]></title>
  <link href="http://hedleyyan.github.io/tags/java/atom.xml" rel="self"/>
  <link href="http://hedleyyan.github.io/"/>
  <updated>2017-08-16T11:57:20+08:00</updated>
  <id>http://hedleyyan.github.io/</id>
  <author>
    <name><![CDATA[hedley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HotSpot JVM 调试大杂烩]]></title>
    <link href="http://hedleyyan.github.io/blog/2016/09/21/jvm-diao-shi-da-za-hui/"/>
    <updated>2016-09-21T11:19:33+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2016/09/21/jvm-diao-shi-da-za-hui</id>
    <content type="html"><![CDATA[<p><blockquote><p>此文的 JVM 环境特指 HotSpot JVM</p></blockquote></p>

<h2><a href="http://xmlandmore.blogspot.hk/2012/01/understanding-garbage-collection.html">Understanding Garbage Collection</a></h2>

<p>了解 JVM 内存回收机制，以及年轻代、伊甸园、年老代的意义。<a href="http://xmlandmore.blogspot.hk/2012/03/case-study-of-javalangoutofmemoryerror.html">Full GC</a> 发生很频繁时，关注是否分配内存不足<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、死锁、或者内存泄露。</p>

<ul>
<li><a href="http://xmlandmore.blogspot.hk/2012/03/understanding-garbage-collector-output.html">Understanding Garbage Collector Output of Hotspot VM</a></li>
</ul>


<h2><a href="http://xmlandmore.blogspot.hk/2012/07/jstat-java-virtual-machine-statistics.html">jstat</a> - Statistics Monitoring</h2>

<p>一系列调试选项，常用 <code>jstat -gcutil</code> 排查内存问题。</p>

<h2><a href="http://xmlandmore.blogspot.hk/2013/04/analyze-hanging-programs-using-java.html">jstack</a> - Stack Trace</h2>

<ul>
<li><a href="http://xmlandmore.blogspot.hk/2012/08/understanding-jvm-thread-states.html">Generating Thread Dumps in HotSpot</a> - 等同于 <code>jstack [PID] &gt; threaddump.log</code></li>
<li><a href="http://geekexplains.blogspot.hk/2008/07/threadstate-in-java-blocked-vs-waiting.html">Thread.State in Java? BLOCKED vs WAITING</a></li>
<li><a href="https://community.oracle.com/blogs/sdo/2009/10/16/fun-jstack">Fun With JStack Blog</a></li>
<li><a href="http://stackoverflow.com/questions/28378592/java-thread-state-transition-waiting-to-blocked-or-runnable">Java thread state transition, WAITING to BLOCKED, or RUNNABLE?</a></li>
</ul>


<p>了解不同的线程状态。通常用来排查是否有死锁发生，以及找出高 CPU 消耗的线程状态。</p>

<ul>
<li><code>top -Hp [PID]</code> - 找出进程内最耗费CPU的线程</li>
<li><code>printf "%x\n" [PID]</code> - 得到线程号 TID</li>
<li><code>jstack [PID] | grep [TID]</code> - 观察线程信息</li>
</ul>


<p><img src="/images/JVM/states_trans.png"></p>

<h2><a href="http://xmlandmore.blogspot.hk/2013/08/diagnosing-outofmemoryerror-or-memory_10.html">jmap</a> - Memory Map</h2>

<p>分析 JVM 的内存状态，是排查内存泄露的关键。</p>

<ul>
<li><code>jmap -heap [PID]</code> - 进程堆内存使用情况</li>
<li><code>jmap -histo[:live] [PID] | head 15</code> - 对象占用图。对象占用图粒度很粗，无法获得更详细的对象状态</li>
<li><code>jmap -dump:format=b,file=dump.hprof [PID]</code> - 生成 <em>dump.hprof</em> 文件。执行时间稍长，基于此可进行进一步的精准分析</li>
</ul>


<h4><a href="http://xmlandmore.blogspot.hk/2014/01/eclipse-mat-understand-incoming-and.html">Eclipse MAT</a></h4>

<p>基于 <em>dump.hprof</em> 进行分析，首选主流工具 <em>Eclipse MAT</em>。<em>MAT</em> 可以开上帝视角，通过 <a href="http://xmlandmore.blogspot.hk/2014/01/eclipse-mat-querying-heap-objects-using.html">OQL</a> 精确定位到每个对象，用来做详细的分析挖掘很好用。不过它的缺点也很明显：重量级。如果 dump 文件不大，直接用 <em>MAT</em> 分析没有问题。但现实运行环境中，dump 文件通常很大<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，一般需要面临以下问题：从服务器压缩传输到个人机器，压缩和传输的时间成本很高；解压缩后用 <em>MAT</em> 导入，如果个人机器的内存不够，无法进行解析<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<h5><a href="https://wiki.eclipse.org/MemoryAnalyzer/FAQ#Frequently_Asked_Questions">内存不够装进 Eclipse 的解决方案</a></h5>

<p>找到 <code>org.eclipse.equinox.launcher_1*.jar</code> 的本地目录，命令行执行生成索引过程：</p>

<p><code>java -jar /Users/hedley/eclipse/java-neon/Eclipse.app/Contents/Eclipse/plugins/org.eclipse.equinox.launcher_1*.jar -consoleLog -application org.eclipse.mat.api.parse dump.hprof org.eclipse.mat.api:suspects org.eclipse.mat.api:overview org.eclipse.mat.api:top_components</code> 生成报告，其中 <code>org.eclipse.mat.api:suspects</code>、<code>org.eclipse.mat.api:overview</code>、<code>org.eclipse.mat.api:top_components</code> 是生成的三个主要模块，可根据需要配置。再用 <em>Eclipse</em> 打开报告目录。</p>

<p><blockquote><p>如果以上命令还报内存不足，尝试加参数 -Xmx4g -XX:-UseGCOverheadLimit</p></blockquote></p>

<p><a href="https://www.ibm.com/support/knowledgecenter/SS3KLZ/com.ibm.java.diagnostics.memory.analyzer.doc/queryingheapobjects.html">OQL2</a></p>

<h4><a href="http://dr-brenschede.de/bheapsampler/">BHeapSampler</a></h4>

<p><em>BHeapSampler</em> 是一款轻量级的 JVM 内存分析工具。不，它不单单是轻量级，是羽毛级！如果用 <em>MAT</em>，通常需要把臃肿的 <em>dump.hprof</em> 传到本机进行操作<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。而 <em>BHeapSampler</em> 是一个大小只有 <em><em>26K</em></em> 的 <em>jar</em> 包，上传到服务器一行指令即可进行分析。它分析得到的是一张<strong>大内存对象引用图</strong>，不能进行任何操作与细项查询索引。但是这张重点鲜明的内存图，有时会比 <em>MAT</em> 更击中要害。大写的赞。</p>

<ul>
<li><code>java -Xmx40g -XX:-UseGCOverheadLimit -jar bheapsampler.jar dump.hprof</code> - 得到 <em>memory_graph.dot</em></li>
<li>可以用 <a href="http://graphviz.org/Download_macos.php">Graphviz</a> 查看 <em>.dot</em> 文件，装完也可以将 <em>.dot</em> 转为 <em>pdf</em> 格式： <code>/opt/local/bin/dot -Tpdf -omemory_graph.pdf memory_graph.dot</code></li>
</ul>


<h5>Mac 安装 <em>Graphviz</em></h5>

<p><img src="/images/JVM/graphviz.png"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>For old generation space OutOfMemoryErrors, increase -Xms and -Xmx; For permanent generation OutOfMemoryErrors, increase -XX:PermSize and -XX:MaxPermSize<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>我曾经分析过的线上压力一般服务器的 dump 在 10G 左右<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Eclipse 在导入 dump 文件后，会进行索引分析，占用大量内存。内存不足时会报 OutOfMemoryError<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>很少有人在服务器上装 Eclipse 吧？<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 如何实现 Prototype Pattern]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/08/18/prototype-pattern/"/>
    <updated>2015-08-18T14:53:29+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/08/18/prototype-pattern</id>
    <content type="html"><![CDATA[<p>看到  <a href="https://books.google.com.hk/books?id=FqfKFl4Bm7UC&amp;printsec=frontcover&amp;dq=software+architecture+design+patterns+in+java&amp;hl=en&amp;sa=X&amp;ved=0CB0Q6AEwAGoVChMIktPB556yxwIVhBcsCh3h_wwt#v=onepage&amp;q&amp;f=false">Software Architecture Design Patterns in Java</a> 的 <em>CREATIONAL PATTERNS: Prototype</em> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>章节，忽感一阵恍惚。之前写<a href="/blog/2015/07/18/fu-ze-ren-zai-tan-callback-yu-delegation/">负责任再谈 Callback 与 Delegation</a> 时提到了 <strong>Java 不支持 Delegation</strong>，但是这篇设计模式却好像写如何在 Java 中实现 <em>Delegation</em>。此中涉及了 <code>Object.clone()</code> 方法、<code>Cloneable</code> 接口，真真一团乱麻。</p>

<h2>Prototype Pattern</h2>

<p>先看 <em>Prototype Pattern</em> 的 <a href="https://en.wikipedia.org/wiki/Prototype_pattern">Wiki</a>，一开始提到的便是 <em>Not to be confused with Prototype-based programming</em>，<em>Delegation</em> 正是 <em>Prototype-based programming</em> 的语言特性<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。总之，<em>Prototype Pattern</em> 是创建对象的一种方法，<em>Delegation</em> 是语言的一种天赋。</p>

<h2>clone() &amp;&amp; Cloneable Interface</h2>

<p>了解 <code>clone</code> 之前，看 <a href="https://books.google.com.hk/books?id=ka2VUBqHiWkC&amp;pg=PA54&amp;dq=Item+11:+OVERRIDE+CLONE+JUDICIOUSLY&amp;hl=en&amp;sa=X&amp;ved=0CB0Q6AEwAGoVChMI9vu89beyxwIVClssCh21QQYo#v=onepage&amp;q=Item%2011%3A%20OVERRIDE%20CLONE%20JUDICIOUSLY&amp;f=false">Effective Java, Item 11: Override clone judiciously</a> 是必修课！</p>

<p>随便翻看几个 Java 实现 <em>Prototype Pattern</em> 的例子『<a href="http://www.blackwasp.co.uk/Prototype.aspx">戳这里</a>、<a href="http://www.tutorialspoint.com/design_pattern/prototype_pattern.htm">戳这里</a>、<a href="http://howtodoinjava.com/2013/01/04/prototype-design-pattern-in-java/">戳这里</a>』，也包括最开始提到的 <em>CREATIONAL PATTERNS: Prototype</em>，都是通过 <code>Object</code> 基类中的 <code>clone()</code> 方法直接或间接实现的。</p>

<p><code>clone()</code> 方法是原生方法，它类似 <code>new</code>，会生成新对象，也是一种“构造方法”，所以对构造方法的一些约束对其同样适用<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<p><code>clone()</code> 方法是 <code>protected</code> 方法，想要调用之还需要绑定 <code>Cloneable</code> 接口。这个奇葩设定很恶心，虽说<strong>约定优于配置</strong>，但这种约定实在是太不优雅。按照地球人的理解，一个接口应该提供一种服务，<code>Cloneable</code> 接口提供 <code>clone()</code> 方法天经地义，但又由于其特殊性，<code>clone()</code> 方法的原生实现 Java 需要自己提供，而接口声明的方法又不能给出一个默认实现<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，然后这个 <code>clone()</code> 方法便写在了 <code>Object</code> 里，<code>Cloneable</code> 接口只是作为一个标识接口用：所有实现了 <code>Cloneable</code> 的类需要重写 <code>clone()</code> 方法，通过 <code>super.clone()</code> 来调用 <code>Object.clone()</code> 的原生实现，然后根据需要再做一些适当的调整。</p>

<p>所谓适当的调整，是因为 <code>Object</code> 的 <code>clone()</code> 方法只是 <em>shallow copy</em>，如此 <em>clone</em> 出来的对象，其包含的 <em>mutable</em> 的引用还是同一个引用，并非副本。</p>

<p><blockquote><p>By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal &ldquo;deep structure&rdquo; of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified.</p><footer><strong>Object.clone() 说明</strong></footer></blockquote></p>

<p>了解了这些之后，你以为就可以妥妥的使用 <code>clone()</code> 了吗？还要注意这些限制</p>

<ul>
<li>All classes that implement Cloneable should override clone with a public method whose return type is the class itself.</li>
<li>If you override the clone method in a nonfinal class, you should return an object obtained by invoking super.clone. If all of a class’s superclasses obey this rule, then invoking super.clone will eventually invoke Object’s clone method, creating an instance of the right class.</li>
<li>In effect, the clone method functions as another constructor; you must ensure that it does no harm to the original object and that it properly establishes invariants on the clone.</li>
<li>Like a constructor, a clone method should not invoke any nonfinal methods on the clone under construction.</li>
<li>The clone architecture is incompatible with normal use of final fields referring to mutable objects.</li>
<li>Object’s clone method is declared to throw CloneNotSupportedException, but overriding clone methods can omit this declaration. Public clone methods should omit it because methods that don’t throw checked exceptions are easier to use.</li>
<li>If you decide to make a thread-safe class implement Cloneable, remember that its clone method must be properly synchronized just like any other method.</li>
<li>Given all of the problems associated with Cloneable, it’s safe to say that other interfaces should not extend it, and that classes designed for inheritance (Item 17) should not implement it.</li>
</ul>


<p>鉴于以上种种，我们可以很保守的说：珍爱生命，远离 <em>clone()</em>。</p>

<h2>Copy Constructor || Copy Factory</h2>

<p>EJ 给出了一种替代解决方案：copy constructor or copy factory。它对比 <code>clone()</code> 简直好处多多：不需要受奇葩语意约束、不会和 <code>final</code> 标识的属性冲突、不抛出无意义的异常、不需要类型转换。</p>

<p><img src="/images/copy_constructor.png"></p>

<p><em>copy constructor</em> 接受的参数是其自身实现的接口类型，它们其实类属于 <em>conversion constructor</em>。注意 <code>HashMap</code> 与 <code>Collection</code> 的构造方法里，都有这种 <em>conversion constructor</em>，但是它们都是 <em>shallow copy</em>。</p>

<h2>序列化以及其他</h2>

<p><a href="http://stackoverflow.com/questions/23892962/is-object-deserialization-a-proper-way-to-implement-prototype-pattern-in-java">Is Object deserialization a proper way to implement Prototype pattern in Java?</a> 细致讨论了通过序列化实现 <em>Prototype Pattern</em> 的可能性。结论是<strong>可以</strong>，但代价是巨大的，还不如 <code>clone</code> 呢！其实 XML、JSON 都可以作为实现原型模式的手段，只要能得到一个对象的副本就行了呗。问题中的每一个回答每一个评论都值得细细品味。</p>

<p><img src="/images/kluge.png"></p>

<p><font size="8px"><strong>kluge</strong></font> [英][k&#8217;lu:dʒ] [美][k&#8217;lu:dʒ]  &nbsp;&nbsp; n.由不配套的元件拼凑而成的计算机，异机种系统</p>

<p><a href="http://stackoverflow.com/questions/665860/deep-clone-utility-recomendation/">Deep clone utility recomendation.</a> 给出了实现 <em>deep clone</em> 的一个开源类库 <em><a href="https://github.com/kostaskougios/cloning">The cloning library</a></em>，此贴子的回答评论同样精彩。略看了一眼 <em>The cloning library</em> 的简介和评价，期待度较高，貌似是通过反射实现的，等有空研究一下代码再表。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Page 95.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>language feature<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>主要就是这一条：Never call overridable methods from constructors, either directly or indirectly.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>JKD8 可以做到，咋不早出这个特性嘞<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL5.5 以下版本通过 Java 转义实现 Emoji 存取]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/08/05/mysql5-dot-5-yi-xia-ban-ben-tong-guo-java-zhuan-yi-shi-xian-emoji-cun-qu/"/>
    <updated>2015-08-05T22:41:19+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/08/05/mysql5-dot-5-yi-xia-ban-ben-tong-guo-java-zhuan-yi-shi-xian-emoji-cun-qu</id>
    <content type="html"><![CDATA[<p>我不输出好文，我只是好文的搬运工。<a href="http://cenalulu.github.io/linux/character-encoding">十分钟搞清字符集和字符编码</a>带你走进 <em>Unicode</em> 和 <em>UTF-8</em> 的前世今生。总而言之，<em>Unicode</em> 是标准，<em>UTF-8</em> 是实现。</p>

<h2>MySQL 过招 <em>Emoji</em></h2>

<p>通常 MySQL 的默认字符集都会配置为 <em>UTF-8</em>，只支持单字符不超过 3 bytes 的存储<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。常见的 <em><a href="https://en.wikipedia.org/wiki/Emoji">Emoji</a></em> 的 <em>Unicode</em> 编码值 <em>code point</em> 位于 <code>\u1F601 -- \u1F64F</code> 区间，以 <code>\u1F300</code> 『🌀』举例，它的二进制有 17 位，无法用三字节的 <em>UTF-8</em> 编码表示<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。如果通过 JDBC 将此字符尝试插入 MySQL 记录中，会得到以下异常</p>

<pre><code>java.lang.RuntimeException: java.sql.SQLException: Incorrect string value: '\xF0\x9F\x8C\x80' for column 'message' at row 1 
</code></pre>

<h2>Java 过招 <em>Emoji</em></h2>

<p>Java 存储字符的单元是 <code>char</code>，那么问题来了，16 位的 <code>char</code> 如何 handle 17 位的 <em>Unicode</em> 呢？</p>

<p><img src="/images/doughnut.png"></p>

<p>喜闻乐见，Java 的单个 <code>char</code> 确实无法 handle 🌀。那么 ⚡ 为什么可以通过编译？相信聪明如你，一定可以查到 ⚡ 的 <em>Unicode</em> 是 <code>\u26A1</code>，Tada ~~ 所以 ⚡ 插入数据库中也是妥妥的。</p>

<p>速入 <a href="http://www.czyborra.com/utf/#Java">Java&rsquo;s Unicode Notation</a> 科普一下 Java 对 <em>Unicode</em> 的支持实现，配合<a href="http://chenbochiuan.vip.blog.163.com/blog/static/172332969201072784730795/">通俗易懂版</a>更赞<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。原来 Java 存储单个字符的最小单元并不一定是单个 <code>char</code>，而是根据 <em>code point</em> 的范围确定。如果字符 <code>c</code> 的 <em>code point</em> 二进制表示不超过 16 位那么单个 <code>char</code> 可直接表示<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>；否则要进行以下处理，以 🌀 举例</p>

<ul>
<li>把 <code>\u1F300</code> 的二进制表示 <code>0001 11110011 00000000</code>，其高 10 位与低 10 位拆开备用</li>
<li>高位偏移量 W1 : <code>0xD7C0</code> 与低位偏移量 W2 : <code>0xDC00</code> 分别与其高低 10 位相加处理，得到 <code>\uD83C</code> 与 <code>\uDF00</code><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></li>
<li>两个字符拼接 <code>\uD83C\uDF00</code> 得到 🌀</li>
</ul>


<p><figure class='code'><figcaption><span> (EmojiCharacter.java)</span> <a href='/downloads/code/EmojiCharacter.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">unicode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmojiCharacter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// high offset</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">W1</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;D7C0&quot;</span><span class="o">,</span><span class="mi">16</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// low offset</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">W2</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;DC00&quot;</span><span class="o">,</span><span class="mi">16</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 🌀的二进制字符串表示</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">doughnutBinary</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;1F300&quot;</span><span class="o">,</span><span class="mi">16</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">// 拆成高低 10 位表示</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">highSetsBinary</span> <span class="o">=</span> <span class="n">doughnutBinary</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">doughnutBinary</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">lowSetsBinary</span> <span class="o">=</span> <span class="n">doughnutBinary</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">doughnutBinary</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">10</span><span class="o">,</span> <span class="n">doughnutBinary</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">highSetsBinary</span><span class="o">);</span>     <span class="c1">//    1111100</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lowSetsBinary</span><span class="o">);</span>      <span class="c1">//    1100000000</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 分别与偏移量相加，得到两个编码值</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">highSetsHexFixed</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">W1</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">highSetsBinary</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">lowSetsHexFixed</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">W2</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">lowSetsBinary</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">highSetsHexFixed</span><span class="o">);</span>   <span class="c1">//    d83c</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lowSetsHexFixed</span><span class="o">);</span>    <span class="c1">//    df00</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 拼接这两个编码值，还原字符表示</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">highChar</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">highSetsHexFixed</span><span class="o">,</span> <span class="mi">16</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">lowChar</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">lowSetsHexFixed</span><span class="o">,</span> <span class="mi">16</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">highChar</span><span class="o">);</span>           <span class="c1">//    ?     </span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lowChar</span><span class="o">);</span>            <span class="c1">//    ?</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">highChar</span> <span class="o">+</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">lowChar</span><span class="o">);</span>    <span class="c1">//    🌀</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>合体</h2>

<p>Client 发送 <em>Emoji</em> 到后台，Java 却无法通过 JDBC 将其存储到 MySQL。如果我们遵循某个特定的转换规则，存储前转义一次，读取时再逆转义一次，那不就妥妥妥的了。你当然可以自己写，但是懒逼如我，更倾向于找<a href="https://github.com/vdurmont/emoji-java/">现货</a>。</p>

<h2>引用</h2>

<ul>
<li><a href="http://cenalulu.github.io/linux/character-encoding">十分钟搞清字符集和字符编码</a></li>
<li><a href="http://www.czyborra.com/utf/#Java">Java&rsquo;s Unicode Notation</a></li>
<li><a href="http://stackoverflow.com/questions/2220366/get-unicode-value-of-a-character">Get unicode value of a character</a></li>
<li><a href="http://stackoverflow.com/questions/6617491/how-to-convert-a-string-representation-of-unicode-hex-0x20000-to-the-int-code">Get character of a unicode value</a></li>
<li><a href="http://code.iamcal.com/php/emoji/">Full Emoji Catalog</a></li>
<li><a href="https://github.com/vdurmont/emoji-java/">emoji-java</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>MySQL5.5 版本以后有对 <em>4 bytes</em> 单字符的原生支持，字符集配置为 <em>utf8mb4</em><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>请看十分钟系列的实现细节，三字节的 <em>UTF-8</em> 编码上限是 16 位『4 + 6 + 6』，<code>11111 001100 000000</code> 对应的 <em>UTF-8</em> 编码为 <code>11110000 10011111 10001100 10000000</code>，即 <strong>\xF0</strong>&hellip;，MySQL 经常会冒出这种异常<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>勘误，通俗版中所说的 W1 : <code>0xD800</code> 不对，应是 <code>0xD7C0</code>，已在评论中反映给原作者<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>比如『⚡』<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><em>Unicode</em> 预留了替代区域 <code>\uD800 -- \uDFFF</code> 作为辅助，此区间的单个字符没有实际表示意义<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[负责任再谈 Callback 与 Delegation]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/07/18/fu-ze-ren-zai-tan-callback-yu-delegation/"/>
    <updated>2015-07-18T15:03:11+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/07/18/fu-ze-ren-zai-tan-callback-yu-delegation</id>
    <content type="html"><![CDATA[<h1>引出</h1>

<p>话接上回<a href="/blog/2015/07/10/zhuang-shi-zhe-mo-shi-decorate-pattern-yu-hui-diao-ji-zhi-callback-framework/">不负责瞎说说 Patterns 与 Frameworks</a>，还谈引出问题：<em>Wrapper classes are not suited for use in callback frameworks</em>。虽然最后给出了一个可以验证的 <em>Demo Code</em>，但是个中缘由仍影影绰绰，真相仿佛隔着一层薄纱在向我招手。心急难耐，遂从引出 <em>SELF problem</em> 的论文出发，顺藤摸瓜按图索骥，也许是我的真心打动了上天，也许是我太帅，幸得 <a href="http://blog.csdn.net/yqj2065">yqj2065</a> 老师指点，才把真相抱了个满怀。</p>

<p>幸福来的太快，虚幻又不真实，也许我看到的只是背影，又或许我看到的是庐山真面，放空思绪，容我一点点回忆。不知道待我从求知路上走的更远，回头再看今天的“负责任”是不是够炫酷呢。</p>

<p>先甩大招上结论</p>

<ul>
<li>Java 不支持 <em>delegation</em></li>
<li>C# 的 <em>delegate</em> 不是真正的 <em>delegate</em></li>
<li><a name="想法"><em>delegation</em> ：我只需要你的原型方法，但我不要依赖于你 </a></li>
</ul>


<!--more-->


<h1>线索</h1>

<p>写完上次的“不负责任”，感觉不爽，因为 <em>SELF problem</em> 论文 [<a href="https://static.aminer.org/pdf/PDF/000/522/451/using_prototypical_objects_to_implement_shared_behavior_in_object_oriented.pdf">Using Prototypical Objects to Implement Shared Behavior in Object Oriented Systems</a>] 里还有理解不了的点，<em>Wrapper classes are not suited for use in callback frameworks</em> 这个问题感觉理解的还可以，但是相应的，论文里提到的 <em>delegation</em> 为什么就 OK 呢？论文里说的这个 <em>delegation</em> 又是如何实现的呢？</p>

<p>顺着论文里提到的 <em>delegation appearing several in Lisp-based object oriented systems..</em> 调查了一下 <em>Lisp</em> 语言的背景。</p>

<p>看到了 <em>Lisp</em> 的语法以后，忽感和 <em>Java8 lambda</em> 表达式长的很像。于是再查 <em>Java8 lambda</em> 是不是就是我困惑的那个 <em>delegation</em>。</p>

<p>了解了 <em>Java8 lambda</em> 的机制，并查到了较可信的<a href="http://stackoverflow.com/questions/44912/java-delegates#comment13546516_44916">证据</a>说 <em>Java8 lambda</em> 不是 <em>delegation</em>，并且以后 Java 都不会支持 <em>delegation</em>。</p>

<p>但是上面的信息中提到 C# 是实现了 <em>delegate</em> 的。然后了解了 C# 的 <em>delegate</em>、<em>event</em> 关键字，写了些代码来验证我的<a href="#%E6%83%B3%E6%B3%95">想法</a>。</p>

<p>但是很不幸，没有验证成功。我发现 C# 的 <em>delegate</em> 其实和 <em>Java8 lambda</em> 是一样的原理，不过是一种更方便的语法加上更灵活的实现。</p>

<p>所以又回头开始理 <em>SELF problem</em> 论文，到底是哪里不一致。开始怀疑 C# 的 <em>delegate</em> 和论文里说的 <em>delegation</em> 不是一个频道。</p>

<p>太帅了，又找到了证据。</p>

<p>但是更帅的是，我搞懂了 <em>Callback</em>。</p>

<h1>真· <em>Callback</em></h1>

<p><img class="right" src="/images/Snip20150719_6.png" width="400" height="300"></p>

<p>上回给 <em>callback</em> 下的一句话定义：<em>If you call me, i will call back.</em>  Well，丢掉忘掉扔到垃圾桶。灵感来自<a href="http://blog.csdn.net/yqj2065/article/details/39481255">这里</a>，诚如我下面的留言：拨云见日醍醐灌顶，痛快！</p>

<p>首先， <em>callback</em> 是名词，不是动词，不是场景，它就是一个方法，是回调函数的简称。</p>

<p>其次， <em>callback</em> 强调上下文，有一个分层的概念在。如果是同一层中的调用，就变成了普通的依赖关系，多态的概念。 <em>callback</em> 是特殊场景的多态应用。</p>

<p>了解了这两点之后，理解起来简直是爽，一张类图搞定。</p>

<p><blockquote><p>一个回调函数 / 方法（简称回调 / callback）是上层模块实现的，将被下层模块（反过来）执行的方法。</p></blockquote></p>

<p>可见所谓 <em>framework</em>，根本就是建立在 <em>callback</em> 的基础上的。我们要想做填空题，那么 <em>framework</em> 封装的细节是如何调用我们的代码的呢？ <em>callback</em>！<em><a href="/blog/2015/07/10/zhuang-shi-zhe-mo-shi-decorate-pattern-yu-hui-diao-ji-zhi-callback-framework/#inversion-of-control">Hollywood principle</a></em> 强调的正是 <em>callback</em> 的使用情景：你（上层 <em>Client</em>）不需要来询问我（底层 <em>Server</em>）事件是不是发生了，发生了我会通知你（通过 <em>callback</em>）。</p>

<h1>伪· <em>Delegation</em></h1>

<p><blockquote><p>Worse still, almost every reference you’ll find for &ldquo;delegation&rdquo; shows you examples of just object collaboration with message forwarding. They are examples of plain old method calls and not delegation.</p></blockquote></p>

<p><a href="http://www.saturnflyer.com/blog/jim/2012/07/06/the-gang-of-four-is-wrong-and-you-dont-understand-delegation/">The Gang Of Four Is Wrong And You Don&rsquo;t Understand Delegation</a> 是最让我感动的线索，之前各种凭空猜想的 <em>delegation</em> 到底是何实现终于可以尘埃落定。基本上所有的伪 <em>delegation</em> 都是 <em>composite</em> 加 <em>message forward</em>，包括 Java，包括 C# 和 C++。 <em>delegation</em> 不可能通过 <em>Design Pattern</em> 得到实现。</p>

<h2>C# <em>delegate</em></h2>

<p><a href="http://www.akadia.com/services/dotnet_delegates_and_events.html#The%20Second%20Change%20Event%20Example">Delegates and Events in C# / .NET</a> 例子很棒，简简单单说明白了 C# 中的 delegate 和 event 的原理，然后你会发现它和 Java 的各种充满 <em>Listeners</em> / <em>Handlers</em> 的代码意思大同小异。例子中的代码完全可以用 Java 实现，一个 <em>callback</em> 搞定。</p>

<p><figure class='code'><figcaption><span> (DelegationTest.java)</span> <a href='/downloads/code/DelegationTest.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Clock</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">_hour</span><span class="o">,</span> <span class="n">_minute</span><span class="o">,</span> <span class="n">_second</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">SecondChangeHandler</span><span class="o">&gt;</span> <span class="n">listeners</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">SecondChangeHandler</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Calendar</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">HOUR_OF_DAY</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">minute</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">MINUTE</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">SECOND</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">second</span> <span class="o">!=</span> <span class="n">_second</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">TimeInfoEventArgs</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TimeInfoEventArgs</span><span class="o">(</span><span class="n">hour</span><span class="o">,</span> <span class="n">minute</span><span class="o">,</span> <span class="n">second</span><span class="o">);</span>
</span><span class='line'>                <span class="n">onSecondChange</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// update the time</span>
</span><span class='line'>            <span class="n">_hour</span> <span class="o">=</span> <span class="n">hour</span><span class="o">;</span>
</span><span class='line'>            <span class="n">_minute</span> <span class="o">=</span> <span class="n">minute</span><span class="o">;</span>
</span><span class='line'>            <span class="n">_second</span> <span class="o">=</span> <span class="n">second</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">SecondChangeHandler</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">listeners</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onSecondChange</span><span class="o">(</span><span class="n">Object</span> <span class="n">clock</span><span class="o">,</span> <span class="n">TimeInfoEventArgs</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">SecondChangeHandler</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">listeners</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">listener</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">clock</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">TimeInfoEventArgs</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">hour</span><span class="o">,</span> <span class="n">minute</span><span class="o">,</span> <span class="n">second</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">TimeInfoEventArgs</span><span class="o">(</span><span class="kt">int</span> <span class="n">hour</span><span class="o">,</span> <span class="kt">int</span> <span class="n">minute</span><span class="o">,</span> <span class="kt">int</span> <span class="n">second</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">hour</span> <span class="o">=</span> <span class="n">hour</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">minute</span> <span class="o">=</span> <span class="n">minute</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">second</span> <span class="o">=</span> <span class="n">second</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getHour</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">hour</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMinute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">minute</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSecond</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">second</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">SecondChangeHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Object</span> <span class="n">sender</span><span class="o">,</span> <span class="n">TimeInfoEventArgs</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">DisplayClock</span> <span class="kd">implements</span> <span class="n">SecondChangeHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Object</span> <span class="n">sender</span><span class="o">,</span> <span class="n">TimeInfoEventArgs</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Current Time: %d:%d:%d&quot;</span><span class="o">,</span> <span class="n">args</span><span class="o">.</span><span class="na">getHour</span><span class="o">(),</span> <span class="n">args</span><span class="o">.</span><span class="na">getMinute</span><span class="o">(),</span> <span class="n">args</span><span class="o">.</span><span class="na">getSecond</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">LogClock</span> <span class="kd">implements</span> <span class="n">SecondChangeHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Object</span> <span class="n">sender</span><span class="o">,</span> <span class="n">TimeInfoEventArgs</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Logging to file: %d:%d:%d&quot;</span><span class="o">,</span> <span class="n">args</span><span class="o">.</span><span class="na">getHour</span><span class="o">(),</span> <span class="n">args</span><span class="o">.</span><span class="na">getMinute</span><span class="o">(),</span> <span class="n">args</span><span class="o">.</span><span class="na">getSecond</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DelegationTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Clock</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Clock</span><span class="o">();</span>
</span><span class='line'>        <span class="n">SecondChangeHandler</span> <span class="n">dh</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DisplayClock</span><span class="o">();</span>
</span><span class='line'>        <span class="n">SecondChangeHandler</span> <span class="n">lh</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LogClock</span><span class="o">();</span>
</span><span class='line'>        <span class="n">c</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">dh</span><span class="o">);</span>
</span><span class='line'>        <span class="n">c</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">lh</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">c</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>但是 C# 的 delegate 机制比 Java 的更灵活，因为 delegate 可以被“委托”多个不同方法，而这些方法只需要有相同的 <code>signature</code> 和返回值，并不需要是同一个接口的声明，所以一个类中的多个方法都可以“委托”它。Java 并没有这种原生支持，<a href="http://www.onjava.com/pub/a/onjava/2003/05/21/delegates.html">A Java Programmer Looks at C# Delegates</a> 有如何用 Java 模拟 C# delegate 的实现，有兴趣的可以看看，那是相当费劲。</p>

<h2><em>Java8 lambda</em> 表达式</h2>

<p><blockquote><p>It is unlikely that the Java programming language will ever include this construct. Sun already carefully considered adopting it in 1996, to the extent of building and discarding working prototypes. Our conclusion was that bound method references are unnecessary and detrimental to the language. This decision was made in consultation with Borland International, who had previous experience with bound method references in Delphi Object Pascal.</p></p><p><p>We believe bound method references are unnecessary because another design alternative, inner classes, provides equal or superior functionality. In particular, inner classes fully support the requirements of user-interface event handling, and have been used to implement a user-interface API at least as comprehensive as the Windows Foundation Classes.</p></p><p><p>We believe bound method references are harmful because they detract from the simplicity of the Java programming language and the pervasively object-oriented character of the APIs. Bound method references also introduce irregularity into the language syntax and scoping rules. Finally, they dilute the investment in VM technologies because VMs are required to handle additional and disparate types of references and method linkage efficiently.</p></blockquote></p>

<p>Java 官方很早就声明了其不会支持 <em>delegate</em>（这里指 C# 的 <em>delegate</em>）。Sun 相信可以通过内部类实现需要的功能，<em>method reference</em> 会破坏 Java 的 <em>simplicity</em>。对 Java 的简单特性表示粉赞👍。</p>

<p><em>Java8 lambda</em> 的出现解决了内部类的臃肿写法，语法更清凉，口感更酸爽，更重要的是其可利用内部循环（<code>for</code> 是外部循环）充分利用多处理器。但其本质上就是一个匿名方法，并不是 <em>method reference</em>，不赘述更多细节。</p>

<h3><em>Monad</em></h3>

<p><blockquote><p>In functional programming, a monad is a structure that represents computations defined as sequences of steps: a type with a monad structure defines what it means to chain operations, or nest functions of that type together.</p></blockquote></p>

<p><em>Monad</em> 本是函数编程语言中的高级特性，<em>Java8 lambda</em> 的出现却让人不由自主的把他们联想到一起。<a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">这篇棒棒的引出教程</a>完美诠释了什么叫一张图胜过千言万语，虽然我没往细里看 <em>Monad</em>，但这篇文章里的图借来理解 <em>Java8 lambda</em> 的内部循环也是极好的。</p>

<p><img src="/images/monad/fmap_just.png">
<img src="/images/monad/fmap_list.png">
<img src="/images/monad/monad_chain.png"></p>

<p>通过 <em>Java8 lambda</em> 也可以实现初级的 <em>Monad</em>，脑洞略大暂不做细表。</p>

<h1>真· <em>Delegation</em></h1>

<p><blockquote><p>Delegation removes the distinction between classes and instances. Any object can serve as a prototype. To create an object that shares knowledge with a prototype, you construct an extension object, which has a list containing its prototypes which may be shared with other objects, and personal behavior idiosyncratic to the object itself. When an extension object receives a message, it first attempts to respond to the message using the behavior stored in its personal part. If the object&rsquo;s personal characteristics are not relevant for answering the message, the object forwards the message on to the prototypes to see if one can respond to the message. This process of forwarding is called delegating the message.</p><footer><strong>Lieberman86</strong></footer></blockquote></p>

<p><em>delegation</em> 是建立在 <em>prototype object</em> 的基础上的，以 <em>class</em> 为基础的 <em>inheritance system</em> 不能实现 <em>delegation</em>。</p>

<p><em>delegation</em> 和 <em>message forward</em> 区别的唯一标准就是<strong>最终执行的方法 M 内是否可以引用到最初发起请求的对象 O</strong>，更简单粗暴一点：<strong>M 内的 <code>this</code> 是不是指代 O</strong>。[<em>SELF problem</em>]</p>

<h2><em>Javascript</em></h2>

<p>了解的语言少是短板，如果早了解了 <em>Javascript</em> 的大概机制和语法，少绕多大一圈子啊。</p>

<pre><code class="javascript">function Container(){};
Container.prototype = new Object();
Container.prototype.announce = function(){ alert("these are my things: " + this.things) };

function Bucket(things){this.things = things};
Bucket.prototype = new Container();

bucket = new Bucket("planes, trains, and automobiles")
bucket.announce() // alerts "these are my things: planes, trains, and automobiles"
</code></pre>

<h1>乱入 <em>delegate</em> 的 <em>Patterns</em></h1>

<p>由于 GoF 在设计模式中大范围杀伤式的使用了 <em>delegation</em> 一词，各种 <em>pattern</em> 中的各种 <em>delegate</em> 乱入满天飞一直流传至今。当然它们都是 <em>message forward</em> 和 <em>composite</em> 的结合体。</p>

<h2><em>Decorator Pattern</em> 和 <em>Proxy Pattern</em></h2>

<p><blockquote><p>Decorator Pattern focuses on dynamically adding functions to an object, while Proxy Pattern focuses on controlling access to an object.</p></blockquote></p>

<p>综合 <a href="http://stackoverflow.com/questions/18618779/differences-between-proxy-and-decorator-pattern">Differences between Proxy and Decorator Pattern</a> 所有回答的意见，可以得到一个比较全面的结论。</p>

<p>装饰者模式和代理模式的类图看上去没什么差，他们的区别主要在目的。代理模式中，代理类对被代理的对象有控制权，决定其执行或者不执行。而装饰模式中，装饰类对代理对象没有控制权，只能为其增加一层装饰，以加强被装饰对象的功能。</p>

<h3><em>Dynamic Proxy</em></h3>

<p>设想一个被代理的对象有很多方法，那么它的代理类看上去可能就很像上回提到的<a href="/blog/2015/07/10/zhuang-shi-zhe-mo-shi-decorate-pattern-yu-hui-diao-ji-zhi-callback-framework/#forward">这段代码</a>。而我们想要实现的一个代理其权限判断很集中，那么是不是把这段集中的权限控制的代码剥离出来，感觉世界会更美好呢。</p>

<p><code>java.lang.reflect</code> 包下的 <code>InvocationHandler</code> 和 <code>Proxy</code> 类对动态代理提供支持，我们只需要提供一个 <code>InvocationHandler</code> 的实例来处理集中的权限控制逻辑就好。</p>

<h1>总结</h1>

<p>引用一段百度的委托和代理的区别作为总结，想来学会写代码考个律师应该也不是太难的事。</p>

<p><blockquote><p>所谓代理，就是指一方授予他方代理权，他方依代理权与第三方进行法律行为，其行为后果由一方承担的一种民事法律制度。委托是一方将一定的事务委诸于另一方实施的法律制度。</p></p><p><p>委托和代理的区别在于：第一，委托规范的是委托人和受托人双方之间的关系；而代理规范的是本人、代理人和第三人的关系。第二，代理关系中代理人代理的对象是进行意思表示和接受意思表示的行为；而委托中受托人代为实施的行为可以是法律行为，也可以是事实行为。第三，代理包括对内和对外两种关系，对内是代理人和被代理人之间的关系，而对外是代理人和第三人之间的关系；而委托只是委托人和受托人之间的关系。</p></blockquote></p>

<h1>扩展阅读</h1>

<ul>
<li><a href="https://static.aminer.org/pdf/PDF/000/522/451/using_prototypical_objects_to_implement_shared_behavior_in_object_oriented.pdf">Using Prototypical Objects to Implement Shared Behavior in Object Oriented Systems</a></li>
<li><a href="https://en.wikipedia.org/wiki/Prototype-based_programming">Prototype-based Programming</a></li>
<li><a href="http://stackoverflow.com/questions/44912/java-delegates#comment13546516_44916">Java Delegates?</a></li>
<li><a href="http://stackoverflow.com/questions/20311779/is-there-delegate-in-java-8-jdk8/30925223#30925223">Is there delegate in Java 8 (JDK8)?</a></li>
<li><a href="http://stackoverflow.com/questions/1746332/delegates-and-callbacks">C# does not implement delegates</a></li>
<li><a href="http://www.saturnflyer.com/blog/jim/2012/07/06/the-gang-of-four-is-wrong-and-you-dont-understand-delegation/">The Gang Of Four Is Wrong And You Don&rsquo;t Understand Delegation</a></li>
<li><a href="http://blog.csdn.net/yqj2065/article/details/39481255">《编程导论（Java）·9.3.1Java回调》1</a></li>
<li><a href="http://blog.csdn.net/yqj2065/article/details/31441221">《编程导论（Java）·9.3.1Java回调》2</a></li>
<li><a href="http://www.onjava.com/pub/a/onjava/2003/05/21/delegates.html">A Java Programmer Looks at C# Delegates</a></li>
<li><a href="http://www.akadia.com/services/dotnet_delegates_and_events.html#The%20Second%20Change%20Event%20Example">Delegates and Events in C# / .NET</a></li>
<li><a href="http://stackoverflow.com/questions/18618779/differences-between-proxy-and-decorator-pattern">Differences between Proxy and Decorator Pattern</a></li>
<li><a href="http://stackoverflow.com/questions/44965/what-is-a-monad">What is a monad?</a>

<ul>
<li><a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a></li>
<li><a href="http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html">You Could Have Invented Monads! (And Maybe You Already Have.)</a></li>
<li><a href="http://www.jdon.com/idea/java8-monad.html">Java8 的 Monad</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不负责瞎说说 Patterns 与 Frameworks]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/07/10/zhuang-shi-zhe-mo-shi-decorate-pattern-yu-hui-diao-ji-zhi-callback-framework/"/>
    <updated>2015-07-10T17:11:00+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/07/10/zhuang-shi-zhe-mo-shi-decorate-pattern-yu-hui-diao-ji-zhi-callback-framework</id>
    <content type="html"><![CDATA[<h1>引出</h1>

<p><a href="https://books.google.com.hk/books?id=ka2VUBqHiWkC&amp;pg=PA85&amp;dq=The+disadvantage+of+wrapper+classes&amp;hl=en&amp;sa=X&amp;ved=0CB0Q6AEwAGoVChMI5L-T5PnPxgIVCQuOCh1joQq6#v=onepage&amp;q=The%20disadvantage%20of%20wrapper%20classes&amp;f=false">Effective Java, Item 16</a> 中说 <em>Wrapper classes are not suited for use in callback frameworks</em>，想不明白，一顿 Google 依旧看个似懂非懂。我想把这些凌乱的线索都整理出来，抽抽剪剪排列组合一下，也许就看的透彻点了呢。</p>

<p>关于 <em>Wrapper class</em> 的引出问题，个人认为比较<a href="http://programmers.stackexchange.com/questions/117628/why-are-wrapper-classes-not-suited-for-use-in-callback-frameworks">炫酷的解答</a>。</p>

<p><blockquote><p>Because a wrapped object doesn&rsquo;t know of its wrapper, it passes a reference to itself(this) and callbacks elude the wrapper. This is known as the SELF problem <a href="https://static.aminer.org/pdf/PDF/000/522/451/using_prototypical_objects_to_implement_shared_behavior_in_object_oriented.pdf">Lieberman86</a>. This leads to subtle bugs, like the wrapper missing the event. Or the wrapper and wrapped object both registering for the same events - leading to duplicate processing and potential concurrency issues as well. If you don&rsquo;t know (don&rsquo;t have the source code) where callbacks are registered, it may be impossible to work around this problem.</p></blockquote></p>

<h1>Panttern? Framework?</h1>

<p>引出中的 <em>Wrapper class</em> 是 <em>Decorator pattern</em> 的引出概念，<em>callback frameworks</em> 是一种 <em>framework</em>。从翻译上看，<em>pattern</em> 译为 <strong>模式</strong>，<em>framework</em> 译为 <strong>框架</strong>。那么这个 <em>pattern</em> 与 <em>framework</em> 有毛的区别呢？</p>

<!--more-->


<p><a href="https://www.dre.vanderbilt.edu/~schmidt/PDF/patterns-intro4.pdf">Introduction to Patterns and Frameworks</a> 和 <a href="http://stackoverflow.com/questions/320142/design-patterns-vs-frameworks">Design patterns vs Frameworks</a> 对这个问题都有比较系统的分析，各位看官可以细细品看一下。一言以蔽之，<em>pattern</em> 是解决某个具体问题的方案，<em>framework</em> 是一套系统架构可重用的组件（通常包括若干个 <em>pattern</em>），他们经常共同为软件系统的可重用性、可扩展性提供支持。</p>

<p><blockquote><p>Patterns support reuse of software architecture and design: Patterns capture the static and dynamic structures and collaborations of successful solutions to problems that arise when building applications in a particular domain.<br/>Frameworks support reuse of detailed design and code: A framework is an integrated set of components that collaborate to provide a reusable architecture for a family of related applications.</p></blockquote></p>

<h1>Framework</h1>

<h2>Inversion of Control</h2>

<p>打个比方：<em>Frameworks</em> 就是挖好了一堆坑，让你往里面填萝卜，填肥料。不同的肥料怎么找对应的萝卜 <em>Frameworks</em> 来接手，这个过程就是<strong>控制反转</strong>（<a href="https://en.wikipedia.org/wiki/Inversion_of_control">Inversion of Control</a>）啦。</p>

<p><blockquote><p>Don&rsquo;t call us, we&rsquo;ll call you.</p><footer><strong>Hollywood principle</strong></footer></blockquote></p>

<h3>Dependency injection</h3>

<p>从代码上看，<em>IoC</em> 的实现主要包括<strong>依赖注入</strong>（<a href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency injection</a>），以及其他的一些 <em>Patterns</em>。所以准确的来说，<em>Dependency injection</em> 是实现 <em>IoC</em> 的一种途径，但是现在很多的技术鸡汤文都把它们划上了等于号，这里了解一下概念即可，无伤大雅。</p>

<p><em>So</em>，<em>Frameworks</em> 的基础是 <em>IoC</em>，而 <em>IoC</em> 的基础又是 <em>Dependency injection</em>。不要被这个高大上的名词唬到，其实它（主要）就是 <code>set</code> 方法而已。</p>

<h2>Callback frameworks</h2>

<p>如果说 <em>IoC</em> 的精髓一句话概括为：<em>Don&rsquo;t call us, we&rsquo;ll call you.</em></p>

<p>那么<strong>回调</strong>（<a href="http://www.codeweblog.com/%E6%B5%85%E6%9E%90java-callback-%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%BC%8F/">callback</a>）的一句话概括就是：<em>If you call me, i will call back.</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p><em>callback frameworks</em> 其实并不是一种具体的 <em>framework</em>，而是代表<strong>一类</strong> <em>framework</em>。比如大多数的 <em>GUI frameworks</em>，比如 <em>SAX (Streaming XML) XML parsers</em>。</p>

<h3><a name="callback_code">Demo code</a></h3>

<pre><code class="java">public class Context implements A.Callback {

    private A a;

    public void begin() {
        System.out.println("begin ...");
    }

    public void end() {
        System.out.println("end ...");
    }

    public Context() {
        this.a = new A(this);
    }

    public void doSomething() {
        this.a.doIt();
    }

    public static void main(String args[]) {
        new Context().doSomething();
    }
}

public class A {

    private final Callback callback;

    public static interface Callback {
        public void begin();
        public void end();
    }
    public A(Callback callback) {
        this.callback = callback;
    }
    public void doIt() {
        callback.begin();
        System.out.println("do something ...");
        callback.end();
    }
}
</code></pre>

<h2>Spring</h2>

<p>如果要找一种具体的 <em>framework</em>，最典型的当然非 <em>Spring</em> 莫属。</p>

<p>网上介绍的文章一箩筐，比如这两篇，<a href="http://programmers.stackexchange.com/questions/92393/what-does-the-spring-framework-do-should-i-use-it-why-or-why-not?rq=1">戳这里</a>，<a href="http://blog.csdn.net/taijianyu/article/details/2338311/">戳这里</a>。可以简单的看一下，主要是加深对 <em>Dependency injection</em> 的理解。</p>

<h1>Pattern</h1>

<h2>Decorator pattern</h2>

<p><blockquote><p>Favor composition over inheritance. Inheritance propagates any flaws in the superclass’s API, while composition lets you design a new API that hides these flaws.</p></blockquote></p>

<p>装饰者模式是<em>继承可实例化的类</em>的替代解决方案，<a href="https://books.google.com.hk/books?id=ka2VUBqHiWkC&amp;pg=PA85&amp;dq=The+disadvantage+of+wrapper+classes&amp;hl=en&amp;sa=X&amp;ved=0CB0Q6AEwAGoVChMI5L-T5PnPxgIVCQuOCh1joQq6#v=onepage&amp;q=The%20disadvantage%20of%20wrapper%20classes&amp;f=false">Effective Java, Item 16</a> 一节的主题正是 <em>Favor composition over inheritance</em>。B 继承可实例化的类 A 有很多问题，比如</p>

<ul>
<li>B 依赖于 A 的实现细节，如果 A 的后续版本中更新了实现细节，可能会破坏 B</li>
<li>A 在后续版本中可能会加入新的方法，不满足 B 的 check</li>
<li>A 的后续版本中加入了新方法 m，不巧 B 提前声明了 m</li>
<li>B 不可能实现一个满意的 <code>equals</code> 方法（<a href="https://books.google.com.hk/books?id=ka2VUBqHiWkC&amp;pg=PA40&amp;dq=While+there+is+no+satisfactory+way+to+extend+an+instantiable+class+and+add+a+value+component&amp;hl=en&amp;sa=X&amp;ved=0CB0Q6AEwAGoVChMI08nF6OrVxgIVhe9yCh28bQWD#v=onepage&amp;q=While%20there%20is%20no%20satisfactory%20way%20to%20extend%20an%20instantiable%20class%20and%20add%20a%20value%20component&amp;f=false">Effective Java, Item 8</a>）</li>
</ul>


<h3><a name="forward">Demo code</a></h3>

<pre><code class="java">// Wrapper class - uses composition in place of inheritance
public class InstrumentedSet&lt;E&gt; extends ForwardingSet&lt;E&gt; {
    private int addCount = 0;

    public InstrumentedSet(Set&lt;E&gt; s) {
        super(s);
    }

    @Override
    public boolean add(E e) {
        addCount++;
        return super.add(e);
    }

    @Override
    public boolean addAll(Collection&lt;? extends E&gt; c) {
        addCount += c.size();
        return super.addAll(c);
    }

    public int getAddCount() {
        return addCount;
    }
}

// Reusable forwarding class
public class ForwardingSet&lt;E&gt; implements Set&lt;E&gt; {
    private final Set&lt;E&gt; s;
    public ForwardingSet(Set&lt;E&gt; s)      { this.s = s;              }
    public void clear()                 { s.clear();               }
    public boolean contains(Object o)   { return s.contains(o);    }
    public boolean isEmpty()            { return s.isEmpty();      }
    public int size()                   { return s.size();         }
    public Iterator&lt;E&gt; iterator()       { return s.iterator();     }
    public boolean add(E e)             { return s.add(e);         }
    public boolean remove(Object o)     { return s.remove(o);      }
    public boolean containsAll(Collection&lt;?&gt; c) 
                                        { return s.containsAll(c); }
    public boolean addAll(Collection&lt;? extends E&gt; c)
                                        { return s.addAll(c);      }
    public boolean removeAll(Collection&lt;?&gt; c)
                                        { return s.removeAll(c);   }
    public boolean retainAll(Collection&lt;?&gt; c)
                                        { return s.retainAll(c);   }
    public Object[] toArray()           { return s.toArray();      }
    public &lt;T&gt; T[] toArray(T[] a)       { return s.toArray(a);     }
    @Override public boolean equals(Object o)
                                        { return s.equals(o);      }
    @Override public int hashCode()     { return s.hashCode();     }
    @Override public String toString()  { return s.toString();     }
}
</code></pre>

<h1>再谈引出</h1>

<p><em>Wrapper classes are not suited for use in callback frameworks</em>，在了解了相关的各种基本概念后，现在可以给出示例代码了。结合之前介绍的 <a href="#callback_code">callback framework demo code</a> 进行说明，给 <code>Context</code> 一个 <em>Wrapper class</em>，观察效果。</p>

<pre><code class="java">public class ContextB implements Callback {

    Callback real;

    public ContextB(Callback real) {
        this.real = real;
    }

    @Override
    public void begin() {
        System.out.println("B begin ...");
        real.begin();
    }

    @Override
    public void end() {
        System.out.println("B end ...");
        real.end();
    }

    public void ex() {
        System.out.println("B ex ...");
        real.ex();
    }

    public static void main(String args[]) {
        Callback real = new Context();
        new ContextB(real).ex();
    }
}
</code></pre>

<p>观察输出，有豁然开朗的感觉吗？有请点赞~</p>

<pre><code class="java">B ex ...
begin ...
do something ...
end ...
</code></pre>

<h1>扩展阅读</h1>

<ul>
<li><a href="https://books.google.com.hk/books?id=ka2VUBqHiWkC&amp;pg=PA85&amp;dq=The+disadvantage+of+wrapper+classes&amp;hl=en&amp;sa=X&amp;ved=0CB0Q6AEwAGoVChMI5L-T5PnPxgIVCQuOCh1joQq6#v=onepage&amp;q=The%20disadvantage%20of%20wrapper%20classes&amp;f=false">Effective Java, Item 16</a></li>
<li><a href="https://books.google.com.hk/books?id=ka2VUBqHiWkC&amp;pg=PA40&amp;dq=While+there+is+no+satisfactory+way+to+extend+an+instantiable+class+and+add+a+value+component&amp;hl=en&amp;sa=X&amp;ved=0CB0Q6AEwAGoVChMI08nF6OrVxgIVhe9yCh28bQWD#v=onepage&amp;q=While%20there%20is%20no%20satisfactory%20way%20to%20extend%20an%20instantiable%20class%20and%20add%20a%20value%20component&amp;f=false">Effective Java, Item 8</a></li>
<li><a href="http://programmers.stackexchange.com/questions/117628/why-are-wrapper-classes-not-suited-for-use-in-callback-frameworks">Why are wrapper classes not suited for use in callback frameworks</a></li>
<li><a href="https://www.dre.vanderbilt.edu/~schmidt/PDF/patterns-intro4.pdf">Introduction to Patterns and Frameworks</a></li>
<li><a href="http://stackoverflow.com/questions/320142/design-patterns-vs-frameworks">Design patterns vs Frameworks</a></li>
<li><a href="http://www.codeweblog.com/%E6%B5%85%E6%9E%90java-callback-%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%BC%8F/">浅析 Java Callback 回调模式</a></li>
<li><a href="https://en.wikipedia.org/wiki/Inversion_of_control">Inversion of Control 维基百科</a></li>
<li><a href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency injection 维基百科</a></li>
<li><a href="http://programmers.stackexchange.com/questions/92393/what-does-the-spring-framework-do-should-i-use-it-why-or-why-not?rq=1">What is dependency injection</a></li>
<li><a href="http://blog.csdn.net/taijianyu/article/details/2338311/">什么是依赖注入</a></li>
<li><a href="https://static.aminer.org/pdf/PDF/000/522/451/using_prototypical_objects_to_implement_shared_behavior_in_object_oriented.pdf">Using Prototypical Objects to Implement Shared Behavior in Object Oriented Systems</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is bullshit. 请看负责任那篇<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
