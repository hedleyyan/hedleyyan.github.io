<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: tips | Hedley]]></title>
  <link href="http://hedleyyan.github.io/tags/tips/atom.xml" rel="self"/>
  <link href="http://hedleyyan.github.io/"/>
  <updated>2016-10-11T14:59:16+08:00</updated>
  <id>http://hedleyyan.github.io/</id>
  <author>
    <name><![CDATA[hedley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS X 通过命令行设置特定 IP]]></title>
    <link href="http://hedleyyan.github.io/blog/2016/10/10/os-x-ming-ling-xing-she-ding-zhi-ding-ip/"/>
    <updated>2016-10-10T22:07:02+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2016/10/10/os-x-ming-ling-xing-she-ding-zhi-ding-ip</id>
    <content type="html"><![CDATA[<h2>正文</h2>

<p>由于我自己机器上的服务器配置，到公司联网后，需要手动设置 IP <code>10.0.xx.xx</code>。一旦出了公司连入其他网络，又需要把 IP 改为自动获得。通常操作顺序是 <code>系统偏好设置 -&gt; 网络 -&gt; Wi-Fi -&gt; 高级 -&gt; TCP/IP -&gt; 使用 DHCP</code>，很麻烦。</p>

<p>查阅了一些资料，Mac OS X 其实可以通过命令行来执行：</p>

<ul>
<li><code>sudo networksetup -setmanualwithdhcprouter Wi-Fi 10.0.xx.xx</code> - 手动设置 IP</li>
<li><code>sudo networksetup -setdhcp Wi-Fi</code> - 自动获得 IP</li>
</ul>


<p>可以写入脚本，配合 <a href="https://www.alfredapp.com/">Alfred</a> 的 Workflows 功能更赞。</p>

<h2>引用</h2>

<p><a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man8/networksetup.8.html">OS X Man Pages</a></p>

<p><a href="http://serverfault.com/questions/638949/os-x-command-line-ipv4-interface-reset">OS X Command Line IPv4 interface Reset</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HotSpot JVM 调试大杂烩]]></title>
    <link href="http://hedleyyan.github.io/blog/2016/09/21/jvm-diao-shi-da-za-hui/"/>
    <updated>2016-09-21T11:19:33+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2016/09/21/jvm-diao-shi-da-za-hui</id>
    <content type="html"><![CDATA[<p><blockquote><p>此文的 JVM 环境特指 HotSpot JVM</p></blockquote></p>

<h2><a href="http://xmlandmore.blogspot.hk/2012/01/understanding-garbage-collection.html">Understanding Garbage Collection</a></h2>

<p>了解 JVM 内存回收机制，以及年轻代、伊甸园、年老代的意义。<a href="http://xmlandmore.blogspot.hk/2012/03/case-study-of-javalangoutofmemoryerror.html">Full GC</a> 发生很频繁时，关注是否分配内存不足<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、死锁、或者内存泄露。</p>

<ul>
<li><a href="http://xmlandmore.blogspot.hk/2012/03/understanding-garbage-collector-output.html">Understanding Garbage Collector Output of Hotspot VM</a></li>
</ul>


<h2><a href="http://xmlandmore.blogspot.hk/2012/07/jstat-java-virtual-machine-statistics.html">jstat</a> - Statistics Monitoring</h2>

<p>一系列调试选项，常用 <code>jstat -gcutil</code> 排查内存问题。</p>

<h2><a href="http://xmlandmore.blogspot.hk/2013/04/analyze-hanging-programs-using-java.html">jstack</a> - Stack Trace</h2>

<ul>
<li><a href="http://xmlandmore.blogspot.hk/2012/08/understanding-jvm-thread-states.html">Generating Thread Dumps in HotSpot</a> - 等同于 <code>jstack [PID] &gt; threaddump.log</code></li>
<li><a href="http://geekexplains.blogspot.hk/2008/07/threadstate-in-java-blocked-vs-waiting.html">Thread.State in Java? BLOCKED vs WAITING</a></li>
<li><a href="https://community.oracle.com/blogs/sdo/2009/10/16/fun-jstack">Fun With JStack Blog</a></li>
<li><a href="http://stackoverflow.com/questions/28378592/java-thread-state-transition-waiting-to-blocked-or-runnable">Java thread state transition, WAITING to BLOCKED, or RUNNABLE?</a></li>
</ul>


<p>了解不同的线程状态。通常用来排查是否有死锁发生，以及找出高 CPU 消耗的线程状态。</p>

<ul>
<li><code>top -Hp [PID]</code> - 找出进程内最耗费CPU的线程</li>
<li><code>printf "%x\n" [PID]</code> - 得到线程号 TID</li>
<li><code>jstack [PID] | grep [TID]</code> - 观察线程信息</li>
</ul>


<p><img src="/images/JVM/states_trans.png"></p>

<h2><a href="http://xmlandmore.blogspot.hk/2013/08/diagnosing-outofmemoryerror-or-memory_10.html">jmap</a> - Memory Map</h2>

<p>分析 JVM 的内存状态，是排查内存泄露的关键。</p>

<ul>
<li><code>jmap -heap [PID]</code> - 进程堆内存使用情况</li>
<li><code>jmap -histo[:live] [PID] | head 15</code> - 对象占用图。对象占用图粒度很粗，无法获得更详细的对象状态</li>
<li><code>jmap -dump:format=b,file=dump.hprof [PID]</code> - 生成 dump 文件。执行时间稍长，基于此可进行进一步的精准分析</li>
</ul>


<p>基于 <code>dump.hprof</code> 进行分析，首选主流 <a href="http://xmlandmore.blogspot.hk/2014/01/eclipse-mat-understand-incoming-and.html">Eclipse MAT</a>。<code>MAT</code> 可以开上帝视角，通过 <a href="http://xmlandmore.blogspot.hk/2014/01/eclipse-mat-querying-heap-objects-using.html">OQL</a> 精确定位到每个对象，用做详细的分析挖掘很好用。不过相对的它的缺点也很明显：重量级。如果 dump 文件不大，直接用 <code>MAT</code> 分析没有问题。但现实运行环境中，dump 文件通常很大<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，一般需要面临以下问题：从服务器压缩传输到个人机器，压缩和传输的时间成本很高；解压缩后用 <code>MAT</code> 导入，如果个人机器的内存不够，无法进行解析<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<p><a href="https://www.ibm.com/support/knowledgecenter/SS3KLZ/com.ibm.java.diagnostics.memory.analyzer.doc/queryingheapobjects.html">OQL 2</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>For old generation space OutOfMemoryErrors, increase -Xms and -Xmx; For permanent generation OutOfMemoryErrors, increase -XX:PermSize and -XX:MaxPermSize<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>我曾经分析过的线上压力一般服务器的 dump 在 10G 左右<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Eclipse 在导入 dump 文件后，会进行索引分析，占用大量内存。内存不足时会报 OutOfMemoryError<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Tips About Sequel Pro]]></title>
    <link href="http://hedleyyan.github.io/blog/2016/03/11/some-tips-about-sequel-pro/"/>
    <updated>2016-03-11T16:28:30+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2016/03/11/some-tips-about-sequel-pro</id>
    <content type="html"><![CDATA[<p><a href="http://www.sequelpro.com/download">Sequel Pro</a> 是一款基于 Mac 的 MySQL IDE，分享几个关于其操作提高效率的小技巧。</p>

<h2>快捷键</h2>

<ul>
<li><code>CMD + t</code>: 新建 TAB</li>
<li><code>CMD + ALT + ←/→</code>: 在 TAB 间切换</li>
<li><code>CMD + 1 ~ 6</code>: 切换不同的视图。

<ul>
<li>默认布局情况 <code>CMD + 2</code> 切换到 <code>Content</code> 查看选中的表数据；<code>CMD + 6</code> 切换到 <code>Query</code> 写 SQL。如果从导航栏点击鼠标切换库，光标焦点会从编辑栏丢失，这时用 <code>CMD + 6</code> 切换继续编辑</li>
</ul>
</li>
</ul>


<p>这几个快捷键在很多应用中都适用，常用的比如 <code>Chrome</code>，<code>ST</code>。</p>

<h2>工作流</h2>

<p>导航栏里的表名匹配非常好用，如果在编辑栏中写的正嗨，怎么用键盘切换到导航栏呢？</p>

<ul>
<li>需要一点前提准备，在打开一个新的 TAB 后，需要在导航栏里任意选中两次不同的表，以来激活 <code>Table History</code> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>光标焦点在编辑栏，<code>CTRL + ALT + ←/→</code> 光标焦点移动到导航栏</li>
<li><code>SHIFT + TAB</code> 光标焦点移动到导航栏表名匹配，输入搜表</li>
<li><code>CMD + 6</code> 返回编辑栏继续彪 SQL</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>是讨厌了点，不过一劳永逸，后面再操作起来带你飞<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sed 循环处理]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/12/27/sed-xun-huan-chu-li/"/>
    <updated>2015-12-27T17:38:03+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/12/27/sed-xun-huan-chu-li</id>
    <content type="html"><![CDATA[<p><em>sed</em> 是 <em>shell</em> 编程中很常见的流编辑命令，主要用于批量替换。</p>

<p><em>sed</em> 的默认编辑单位是『行』，如果要处理的信息分布于多个行中，需要考虑多行处理命令：<em>N、P、D</em>。<em><a href="http://www.grymoire.com/Unix/Sed.html#uh-51">click here, nice tutorial</a></em></p>

<p>考虑以下情景：</p>

<pre><code>% cat onetwo                                                                            
one two onw two one two xxx one
two yyy one
two zzz one    
two kkk two one
twx xxx yyy one two one
xxxxx
xxx

yyy one 
x two one
xx one

two x
x one
two one
two
</code></pre>

<p>如果一行以 <em>one</em> 结尾，而且下一行以 <em>two</em> 开头，那么就把这两个邻接行拼接成一行，并把 <em>one two</em> 替换为 <em>1 2</em>。</p>

<p>在只了解 <em>N、P、D</em> 之后，想出一个比较有意思的解决方案：</p>

<pre><code>% cat onetwo.sed
#!/usr/bin/sed -f
/one *$/ {
        # 连接下一行，$!N 表示如果读到最后一行单独处理 
        $!N
        # 替换 prefix + one + 回车符 + two 为 回车符 + prefix + 1 2
        s/^\(.*\)one *\ntwo/\
\11 2/
        /^\n/ !P
        D
}
</code></pre>

<p>表达式 <em>s/a/b/</em> 中，查找字符串 <em>a</em> 如果包含回车符，用 <code>\n</code> 表示。但是如果替换字符串 <em>b</em> 中如果包含回车符，需要用 <code>\ + 回车</code> 表示。并且回车后的替换内容要顶头，不能排版加空格、tab<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>以上解决方案的关键点在于替换时在开头又加了一个<strong>换行符</strong>，如此后面执行 <em>D</em> 则删除了模式空间中的这个<strong>空行</strong>，继续读入下一行处理，以此达到循环处理的目的。</p>

<pre><code>% ./onetwo.sed onetwo
one two onw two one two xxx 1 2 yyy 1 2 zzz 1 2 kkk two one
twx xxx yyy one two one
xxxxx
xxx

yyy one 
x two one
xx one

two x
x 1 2 1 2
</code></pre>

<p>后面了解了 <em>t</em> 命令后，更直接的解决方案如下：</p>

<pre><code>% cat onetwot.sed     
#!/bin/bash 
sed  '
/one/ {
        :again
                $!N
                s/one *\ntwo/1 2/
                t again

}
' $1
</code></pre>

<p><em>t</em> 命令相当于一个 <em>while</em>，当 <em>t</em> 之前最近的一个 <em>s/a/b/</em> 命令匹配成功时，继续循环。得到同样的运行结果。</p>

<p>此小实例只做趣味讨论，<em>shell</em> 中的流处理<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>都是面向<em>行</em><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>为单位的，对于内容有 overlap 的循环处理，效率低且不好用。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>取决于不同的 sed 版本，但是顶头写肯定是 ok 的。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>sed, awk, grep etc..<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>or 块，比如 awk 中的 FS=&lsquo;\n&rsquo;<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL5.5 以下版本通过 Java 转义实现 Emoji 存取]]></title>
    <link href="http://hedleyyan.github.io/blog/2015/08/05/mysql5-dot-5-yi-xia-ban-ben-tong-guo-java-zhuan-yi-shi-xian-emoji-cun-qu/"/>
    <updated>2015-08-05T22:41:19+08:00</updated>
    <id>http://hedleyyan.github.io/blog/2015/08/05/mysql5-dot-5-yi-xia-ban-ben-tong-guo-java-zhuan-yi-shi-xian-emoji-cun-qu</id>
    <content type="html"><![CDATA[<p>我不输出好文，我只是好文的搬运工。<a href="http://cenalulu.github.io/linux/character-encoding">十分钟搞清字符集和字符编码</a>带你走进 <em>Unicode</em> 和 <em>UTF-8</em> 的前世今生。总而言之，<em>Unicode</em> 是标准，<em>UTF-8</em> 是实现。</p>

<h2>MySQL 过招 <em>Emoji</em></h2>

<p>通常 MySQL 的默认字符集都会配置为 <em>UTF-8</em>，只支持单字符不超过 3 bytes 的存储<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。常见的 <em><a href="https://en.wikipedia.org/wiki/Emoji">Emoji</a></em> 的 <em>Unicode</em> 编码值 <em>code point</em> 位于 <code>\u1F601 -- \u1F64F</code> 区间，以 <code>\u1F300</code> 『🌀』举例，它的二进制有 17 位，无法用三字节的 <em>UTF-8</em> 编码表示<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。如果通过 JDBC 将此字符尝试插入 MySQL 记录中，会得到以下异常</p>

<pre><code>java.lang.RuntimeException: java.sql.SQLException: Incorrect string value: '\xF0\x9F\x8C\x80' for column 'message' at row 1 
</code></pre>

<h2>Java 过招 <em>Emoji</em></h2>

<p>Java 存储字符的单元是 <code>char</code>，那么问题来了，16 位的 <code>char</code> 如何 handle 17 位的 <em>Unicode</em> 呢？</p>

<p><img src="/images/doughnut.png"></p>

<p>喜闻乐见，Java 的单个 <code>char</code> 确实无法 handle 🌀。那么 ⚡ 为什么可以通过编译？相信聪明如你，一定可以查到 ⚡ 的 <em>Unicode</em> 是 <code>\u26A1</code>，Tada ~~ 所以 ⚡ 插入数据库中也是妥妥的。</p>

<p>速入 <a href="http://www.czyborra.com/utf/#Java">Java&rsquo;s Unicode Notation</a> 科普一下 Java 对 <em>Unicode</em> 的支持实现，配合<a href="http://chenbochiuan.vip.blog.163.com/blog/static/172332969201072784730795/">通俗易懂版</a>更赞<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。原来 Java 存储单个字符的最小单元并不一定是单个 <code>char</code>，而是根据 <em>code point</em> 的范围确定。如果字符 <code>c</code> 的 <em>code point</em> 二进制表示不超过 16 位那么单个 <code>char</code> 可直接表示<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>；否则要进行以下处理，以 🌀 举例</p>

<ul>
<li>把 <code>\u1F300</code> 的二进制表示 <code>0001 11110011 00000000</code>，其高 10 位与低 10 位拆开备用</li>
<li>高位偏移量 W1 : <code>0xD7C0</code> 与低位偏移量 W2 : <code>0xDC00</code> 分别与其高低 10 位相加处理，得到 <code>\uD83C</code> 与 <code>\uDF00</code><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></li>
<li>两个字符拼接 <code>\uD83C\uDF00</code> 得到 🌀</li>
</ul>


<p><figure class='code'><figcaption><span> (EmojiCharacter.java)</span> <a href='/downloads/code/EmojiCharacter.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">unicode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmojiCharacter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// high offset</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">W1</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;D7C0&quot;</span><span class="o">,</span><span class="mi">16</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// low offset</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">W2</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;DC00&quot;</span><span class="o">,</span><span class="mi">16</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 🌀的二进制字符串表示</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">doughnutBinary</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">&quot;1F300&quot;</span><span class="o">,</span><span class="mi">16</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">// 拆成高低 10 位表示</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">highSetsBinary</span> <span class="o">=</span> <span class="n">doughnutBinary</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">doughnutBinary</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">lowSetsBinary</span> <span class="o">=</span> <span class="n">doughnutBinary</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">doughnutBinary</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">10</span><span class="o">,</span> <span class="n">doughnutBinary</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">highSetsBinary</span><span class="o">);</span>     <span class="c1">//    1111100</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lowSetsBinary</span><span class="o">);</span>      <span class="c1">//    1100000000</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 分别与偏移量相加，得到两个编码值</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">highSetsHexFixed</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">W1</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">highSetsBinary</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">lowSetsHexFixed</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">W2</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">lowSetsBinary</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">highSetsHexFixed</span><span class="o">);</span>   <span class="c1">//    d83c</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lowSetsHexFixed</span><span class="o">);</span>    <span class="c1">//    df00</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 拼接这两个编码值，还原字符表示</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">highChar</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">highSetsHexFixed</span><span class="o">,</span> <span class="mi">16</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">lowChar</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">lowSetsHexFixed</span><span class="o">,</span> <span class="mi">16</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">highChar</span><span class="o">);</span>           <span class="c1">//    ?     </span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lowChar</span><span class="o">);</span>            <span class="c1">//    ?</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">highChar</span> <span class="o">+</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">lowChar</span><span class="o">);</span>    <span class="c1">//    🌀</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>合体</h2>

<p>Client 发送 <em>Emoji</em> 到后台，Java 却无法通过 JDBC 将其存储到 MySQL。如果我们遵循某个特定的转换规则，存储前转义一次，读取时再逆转义一次，那不就妥妥妥的了。你当然可以自己写，但是懒逼如我，更倾向于找<a href="https://github.com/vdurmont/emoji-java/">现货</a>。</p>

<h2>引用</h2>

<ul>
<li><a href="http://cenalulu.github.io/linux/character-encoding">十分钟搞清字符集和字符编码</a></li>
<li><a href="http://www.czyborra.com/utf/#Java">Java&rsquo;s Unicode Notation</a></li>
<li><a href="http://stackoverflow.com/questions/2220366/get-unicode-value-of-a-character">Get unicode value of a character</a></li>
<li><a href="http://stackoverflow.com/questions/6617491/how-to-convert-a-string-representation-of-unicode-hex-0x20000-to-the-int-code">Get character of a unicode value</a></li>
<li><a href="http://code.iamcal.com/php/emoji/">Full Emoji Catalog</a></li>
<li><a href="https://github.com/vdurmont/emoji-java/">emoji-java</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>MySQL5.5 版本以后有对 <em>4 bytes</em> 单字符的原生支持，字符集配置为 <em>utf8mb4</em><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>请看十分钟系列的实现细节，三字节的 <em>UTF-8</em> 编码上限是 16 位『4 + 6 + 6』，<code>11111 001100 000000</code> 对应的 <em>UTF-8</em> 编码为 <code>11110000 10011111 10001100 10000000</code>，即 <strong>\xF0</strong>&hellip;，MySQL 经常会冒出这种异常<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>勘误，通俗版中所说的 W1 : <code>0xD800</code> 不对，应是 <code>0xD7C0</code>，已在评论中反映给原作者<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>比如『⚡』<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><em>Unicode</em> 预留了替代区域 <code>\uD800 -- \uDFFF</code> 作为辅助，此区间的单个字符没有实际表示意义<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
